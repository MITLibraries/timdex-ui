---
http_interactions:
- request:
    method: post
    uri: https://FAKE_TIMDEX_HOST/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query TimdexSearch__BaseQuery($q: String, $citation: String,
        $contributors: String, $fundingInformation: String, $identifiers: String,
        $locations: String, $subjects: String, $title: String, $index: String, $from:
        String, $accessToFilesFilter: [String!], $contentTypeFilter: [String!], $contributorsFilter:
        [String!], $formatFilter: [String!], $languagesFilter: [String!], $literaryFormFilter:
        String, $placesFilter: [String!], $sourceFilter: [String!], $subjectsFilter:
        [String!]) {\n  search(searchterm: $q, citation: $citation, contributors:
        $contributors, fundingInformation: $fundingInformation, identifiers: $identifiers,
        locations: $locations, subjects: $subjects, title: $title, index: $index,
        from: $from, accessToFilesFilter: $accessToFilesFilter, contentTypeFilter:
        $contentTypeFilter, contributorsFilter: $contributorsFilter, formatFilter:
        $formatFilter, languagesFilter: $languagesFilter, literaryFormFilter: $literaryFormFilter,
        placesFilter: $placesFilter, sourceFilter: $sourceFilter, subjectsFilter:
        $subjectsFilter) {\n    hits\n    records {\n      timdexRecordId\n      title\n      contentType\n      contributors
        {\n        kind\n        value\n      }\n      publicationInformation\n      dates
        {\n        kind\n        value\n      }\n      links {\n        kind\n        restrictions\n        text\n        url\n      }\n      notes
        {\n        kind\n        value\n      }\n      highlight {\n        matchedField\n        matchedPhrases\n      }\n      provider\n      rights
        {\n        kind\n        description\n        uri\n      }\n      sourceLink\n      summary\n    }\n    aggregations
        {\n      accessToFiles {\n        key\n        docCount\n      }\n      contentType
        {\n        key\n        docCount\n      }\n      contributors {\n        key\n        docCount\n      }\n      format
        {\n        key\n        docCount\n      }\n      languages {\n        key\n        docCount\n      }\n      literaryForm
        {\n        key\n        docCount\n      }\n      places {\n        key\n        docCount\n      }\n      source
        {\n        key\n        docCount\n      }\n      subjects {\n        key\n        docCount\n      }\n    }\n  }\n}","variables":{"from":"0","q":"PMID:
        35649707","index":"FAKE_TIMDEX_INDEX"},"operationName":"TimdexSearch__BaseQuery"}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - MIT Libraries Client
      Content-Type:
      - application/json
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Cowboy
      Date:
      - Wed, 20 Mar 2024 15:51:27 GMT
      Report-To:
      - '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1710949887&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=ZW4x%2FT00JcbywJo4RmD9GW3XX47L6UQyX%2B7%2FisWp1o0%3D"}]}'
      Reporting-Endpoints:
      - heroku-nel=https://nel.heroku.com/reports?ts=1710949887&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=ZW4x%2FT00JcbywJo4RmD9GW3XX47L6UQyX%2B7%2FisWp1o0%3D
      Nel:
      - '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}'
      Connection:
      - keep-alive
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Permitted-Cross-Domain-Policies:
      - none
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Content-Type:
      - application/json; charset=utf-8
      Vary:
      - Accept, Origin
      Etag:
      - W/"dd37a766b2a8e379f882a9d00c11a00b"
      Cache-Control:
      - max-age=0, private, must-revalidate
      X-Request-Id:
      - 449fc50f-94ff-4c99-8460-a268662090ff
      X-Runtime:
      - '0.301032'
      Strict-Transport-Security:
      - max-age=63072000; includeSubDomains
      Content-Length:
      - '59849'
      Via:
      - 1.1 vegur
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJkYXRhIjp7InNlYXJjaCI6eyJoaXRzIjoxMywicmVjb3JkcyI6W3sidGltZGV4UmVjb3JkSWQiOiJ6ZW5vZG86MTA2MjEiLCJ0aXRsZSI6Ik9yaWdpbmFsIHNjcmlwdHMgdXNlZCBpbiBwdWJsaWNhdGlvbiIsImNvbnRlbnRUeXBlIjpbIlNvZnR3YXJlIl0sImNvbnRyaWJ1dG9ycyI6W3sia2luZCI6IkNyZWF0b3IiLCJ2YWx1ZSI6IlRvbWFzeiBHYXfEmWRhIn1dLCJwdWJsaWNhdGlvbkluZm9ybWF0aW9uIjpbIlplbm9kbyJdLCJkYXRlcyI6W3sia2luZCI6IlB1YmxpY2F0aW9uIGRhdGUiLCJ2YWx1ZSI6IjIwMTQifSx7ImtpbmQiOiJJc3N1ZWQiLCJ2YWx1ZSI6IjIwMTQtMDYtMjIifV0sImxpbmtzIjpbeyJraW5kIjoiRGlnaXRhbCBvYmplY3QgVVJMIiwicmVzdHJpY3Rpb25zIjpudWxsLCJ0ZXh0IjoiRGlnaXRhbCBvYmplY3QgVVJMIiwidXJsIjoiaHR0cHM6Ly96ZW5vZG8ub3JnL3JlY29yZC8xMDYyMSJ9XSwibm90ZXMiOm51bGwsImhpZ2hsaWdodCI6W3sibWF0Y2hlZEZpZWxkIjoic3VtbWFyeSIsIm1hdGNoZWRQaHJhc2VzIjpbIkRPSTogMTAuMTA5My9iaW9pbmZvcm1hdGljcy9idHE1NzEgXHUwMDNjc3BhbiBjbGFzcz1cImhpZ2hsaWdodFwiXHUwMDNlUE1JRFx1MDAzYy9zcGFuXHUwMDNlOiAyMTAzMDQ2MCAoaHR0cDovL3d3dy5uY2JpLm5sbS5uaWguZ292L3B1Ym1lZC8yMTAzMDQ2MCkgO1x1MDAzYy9wXHUwMDNlIl19XSwicHJvdmlkZXIiOm51bGwsInJpZ2h0cyI6W3sia2luZCI6bnVsbCwiZGVzY3JpcHRpb24iOiJBcGFjaGUgTGljZW5zZSAyLjAiLCJ1cmkiOiJodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0FwYWNoZS0yLjAifSx7ImtpbmQiOm51bGwsImRlc2NyaXB0aW9uIjoiT3BlbiBBY2Nlc3MiLCJ1cmkiOiJpbmZvOmV1LXJlcG8vc2VtYW50aWNzL29wZW5BY2Nlc3MifV0sInNvdXJjZUxpbmsiOiJodHRwczovL3plbm9kby5vcmcvcmVjb3JkLzEwNjIxIiwic3VtbWFyeSI6WyJcdTAwM2NwXHUwMDNlU29mdHdhcmUgdXNlZCBpbjpcdTAwM2MvcFx1MDAzZVxuXG5cdTAwM2NwXHUwMDNlU3RhdGlzdGljYWwgZGlzdHJpYnV0aW9uIG9mIGFtaW5vIGFjaWQgc2VxdWVuY2VzOiBhIHByb29mIG9mIERhcndpbmlhbiBldm9sdXRpb24gS3J5c3RpYW4gRWl0bmVyLCBVd2UgS29jaCwgVG9tYXN6IEdhd8SZZGEgYW5kIErEmWRyemVqIE1hcmNpbmlha1x1MDAzYy9wXHUwMDNlXG5cblx1MDAzY3BcdTAwM2VCaW9pbmZvcm1hdGljcyAoMjAxMCkgMjYgKDIzKTogMjkzMy0yOTM1LiBET0k6IDEwLjEwOTMvYmlvaW5mb3JtYXRpY3MvYnRxNTcxIFBNSUQ6IDIxMDMwNDYwIChodHRwOi8vd3d3Lm5jYmkubmxtLm5paC5nb3YvcHVibWVkLzIxMDMwNDYwKSA7XHUwMDNjL3BcdTAwM2UiXX0seyJ0aW1kZXhSZWNvcmRJZCI6ImRzcGFjZToxNzIxLjEtODgxMjYiLCJ0aXRsZSI6Ik11bHRpc2NhbGUgZmluZ2VycHJpbnRpbmcgb2YgbmV1cm9uYWwgZnVuY3Rpb25hbCBjb25uZWN0aXZpdHkiLCJjb250ZW50VHlwZSI6WyJBcnRpY2xlIl0sImNvbnRyaWJ1dG9ycyI6W3sia2luZCI6ImF1dGhvciIsInZhbHVlIjoiU29uZywgR2FuZyJ9LHsia2luZCI6ImF1dGhvciIsInZhbHVlIjoiVGluLCBDaHVuZyJ9LHsia2luZCI6ImF1dGhvciIsInZhbHVlIjoiUG9vbiwgQ2hpLVNhbmcifSx7ImtpbmQiOiJkZXBhcnRtZW50IiwidmFsdWUiOiJNYXNzYWNodXNldHRzIEluc3RpdHV0ZSBvZiBUZWNobm9sb2d5LiBJbnN0aXR1dGUgZm9yIE1lZGljYWwgRW5naW5lZXJpbmcgXHUwMDI2IFNjaWVuY2UifSx7ImtpbmQiOiJhcHByb3ZlciIsInZhbHVlIjoiUG9vbiwgQ2hpLVNhbmcifSx7ImtpbmQiOiJtaXRhdXRob3IiLCJ2YWx1ZSI6IlNvbmcsIEdhbmcifSx7ImtpbmQiOiJtaXRhdXRob3IiLCJ2YWx1ZSI6IlRpbiwgQ2h1bmcifSx7ImtpbmQiOiJtaXRhdXRob3IiLCJ2YWx1ZSI6IlBvb24sIENoaS1TYW5nIn1dLCJwdWJsaWNhdGlvbkluZm9ybWF0aW9uIjpbIlNwcmluZ2VyLVZlcmxhZyJdLCJkYXRlcyI6W3sia2luZCI6IlB1YmxpY2F0aW9uIGRhdGUiLCJ2YWx1ZSI6IjIwMTQtMTIifV0sImxpbmtzIjpbeyJraW5kIjoiRGlnaXRhbCBvYmplY3QgVVJMIiwicmVzdHJpY3Rpb25zIjpudWxsLCJ0ZXh0IjoiRGlnaXRhbCBvYmplY3QgVVJMIiwidXJsIjoiaHR0cDovL2hkbC5oYW5kbGUubmV0LzE3MjEuMS84ODEyNiJ9XSwibm90ZXMiOm51bGwsImhpZ2hsaWdodCI6W3sibWF0Y2hlZEZpZWxkIjoiaWRlbnRpZmllcnMudmFsdWUiLCJtYXRjaGVkUGhyYXNlcyI6WyJcdTAwM2NzcGFuIGNsYXNzPVwiaGlnaGxpZ2h0XCJcdTAwM2VQbWlkXHUwMDNjL3NwYW5cdTAwM2U6IDI1MDU2OTMzIl19XSwicHJvdmlkZXIiOm51bGwsInJpZ2h0cyI6W3sia2luZCI6InVzZUFuZFJlcHJvZHVjdGlvbiIsImRlc2NyaXB0aW9uIjoiQXJ0aWNsZSBpcyBtYWRlIGF2YWlsYWJsZSBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIHB1Ymxpc2hlcidzIHBvbGljeSBhbmQgbWF5IGJlIHN1YmplY3QgdG8gVVMgY29weXJpZ2h0IGxhdy4gUGxlYXNlIHJlZmVyIHRvIHRoZSBwdWJsaXNoZXIncyBzaXRlIGZvciB0ZXJtcyBvZiB1c2UuIiwidXJpIjpudWxsfV0sInNvdXJjZUxpbmsiOiJodHRwczovL2RzcGFjZS5taXQuZWR1L2hhbmRsZS8xNzIxLjEvODgxMjYiLCJzdW1tYXJ5IjpbIkN1cnJlbnQgY2VsbHVsYXItYmFzZWQgY29ubmVjdG9taWNzIGFwcHJvYWNoZXMgYWltIHRvIGRlbGluZWF0ZSB0aGUgZnVuY3Rpb25hbCBvciBzdHJ1Y3R1cmFsIG9yZ2FuaXphdGlvbnMgb2YgbWFtbWFsaWFuIGJyYWluIGNpcmN1aXRzIHRocm91Z2ggbmV1cm9uYWwgYWN0aXZpdHkgbWFwcGluZyBhbmQvb3IgYXhvbmFsIHRyYWNpbmcuIFRvIGRpc2Nlcm4gcG9zc2libGUgY29ubmVjdGl2aXR5IGJldHdlZW4gZnVuY3Rpb25hbGx5IGlkZW50aWZpZWQgbmV1cm9ucyBpbiB3aWRlbHkgZGlzdHJpYnV0ZWQgYnJhaW4gY2lyY3VpdHMsIHJlbGlhYmxlIGFuZCBlZmZpY2llbnQgbmV0d29yay1iYXNlZCBhcHByb2FjaGVzIG9mIGNyb3NzLXJlZ2lzdGVyaW5nIG9yIGNyb3NzLWNvcnJlbGF0aW5nIHN1Y2ggZnVuY3Rpb25hbC1zdHJ1Y3R1cmFsIGRhdGEgYXJlIGVzc2VudGlhbC4gSGVyZSwgYSBub3ZlbCBjcm9zcy1jb3JyZWxhdGlvbiBhcHByb2FjaCB0aGF0IGV4cGxvaXRzIG11bHRpcGxlIHRpbWluZy1zcGVjaWZpYywgcmVzcG9uc2Utc3BlY2lmaWMgYW5kIGNlbGwtc3BlY2lmaWMgbmV1cm9uYWwgY2hhcmFjdGVyaXN0aWNzIGFzIGNvaW5jaWRlbnQgZmluZ2VycHJpbnQgbWFya2VycyBhdCB0aGUgc3lzdGVtcywgbmV0d29yayBhbmQgY2VsbHVsYXIgbGV2ZWxzIGlzIHByb3Bvc2VkLiBBcHBsaWNhdGlvbiBvZiB0aGlzIG11bHRpc2NhbGUgdGVtcG9yYWwtY2VsbHVsYXIgY29pbmNpZGVudCBmaW5nZXJwcmludGluZyBhc3NheSB0byB0aGUgcmVzcGlyYXRvcnkgY2VudHJhbCBwYXR0ZXJuIGdlbmVyYXRvciBuZXR3b3JrIGluIHJhdHMgcmV2ZWFsZWQgYSBkZXNjZW5kaW5nIGV4Y2l0YXRvcnkgcGF0aHdheSB3aXRoIGNoYXJhY3RlcmlzdGljIGFjdGl2aXR5IHBhdHRlcm4gYW5kIHByb2plY3RpbmcgZnJvbSBhIGRpc3RpbmN0IG5ldXJvbmFsIHBvcHVsYXRpb24gaW4gcG9ucyB0byBpdHMgY291bnRlcnBhcnRzIGluIG1lZHVsbGEgdGhhdCBjb250cm9sIHRoZSBwb3N0LWluc3BpcmF0b3J5IHBoYXNlIG9mIHRoZSByZXNwaXJhdG9yeSByaHl0aG0gaW1wb3J0YW50IGZvciBub3JtYWwgYnJlYXRoaW5nLCBhaXJ3YXkgcHJvdGVjdGlvbiBhbmQgcmVzcGlyYXRvcnktdm9jYWxpemF0aW9uIGNvb3JkaW5hdGlvbi4gVGhpcyBlbmFibGluZyBuZXVyb3RyYWNpbmcgYXBwcm9hY2ggbWF5IHByb3ZlIHZhbHVhYmxlIGZvciBmdW5jdGlvbmFsIGNvbm5lY3Rpdml0eSBtYXBwaW5nIG9mIG90aGVyIGJyYWluIGNpcmN1aXRzLiJdfSx7InRpbWRleFJlY29yZElkIjoiZHNwYWNlOjE3MjEuMS02NTA2NiIsInRpdGxlIjoiQXNzZW1ibHkgb2YgQmlvQnJpY2sgc3RhbmRhcmQgYmlvbG9naWNhbCBwYXJ0cyB1c2luZyB0aHJlZSBhbnRpYmlvdGljIGFzc2VtYmx5IiwiY29udGVudFR5cGUiOlsiQm9vayBjaGFwdGVyIl0sImNvbnRyaWJ1dG9ycyI6W3sia2luZCI6ImF1dGhvciIsInZhbHVlIjoiU2hldHR5LCBSZXNobWEifSx7ImtpbmQiOiJhdXRob3IiLCJ2YWx1ZSI6IkxpemFyYXpvLCBNZWFnYW4ifSx7ImtpbmQiOiJhdXRob3IiLCJ2YWx1ZSI6IlJldHRiZXJnLCBSYW5keSJ9LHsia2luZCI6ImF1dGhvciIsInZhbHVlIjoiS25pZ2h0LCBUaG9tYXMgRi4sIEpyLiJ9XSwicHVibGljYXRpb25JbmZvcm1hdGlvbiI6WyJFbHNldmllciBJbmMuIl0sImRhdGVzIjpbeyJraW5kIjoiUHVibGljYXRpb24gZGF0ZSIsInZhbHVlIjoiMjAxMS0wNS0yMCJ9XSwibGlua3MiOlt7ImtpbmQiOiJEaWdpdGFsIG9iamVjdCBVUkwiLCJyZXN0cmljdGlvbnMiOm51bGwsInRleHQiOiJEaWdpdGFsIG9iamVjdCBVUkwiLCJ1cmwiOiJodHRwOi8vaGRsLmhhbmRsZS5uZXQvMTcyMS4xLzY1MDY2In1dLCJub3RlcyI6bnVsbCwiaGlnaGxpZ2h0IjpbeyJtYXRjaGVkRmllbGQiOiJpZGVudGlmaWVycy52YWx1ZSIsIm1hdGNoZWRQaHJhc2VzIjpbIlx1MDAzY3NwYW4gY2xhc3M9XCJoaWdobGlnaHRcIlx1MDAzZVBNSURcdTAwM2Mvc3Bhblx1MDAzZToyMTYwMTY4MyJdfV0sInByb3ZpZGVyIjpudWxsLCJyaWdodHMiOlt7ImtpbmQiOiJ1c2VBbmRSZXByb2R1Y3Rpb24iLCJkZXNjcmlwdGlvbiI6IkFuIGVycm9yIG9jY3VycmVkIG9uIHRoZSBsaWNlbnNlIG5hbWUuIiwidXJpIjpudWxsfV0sInNvdXJjZUxpbmsiOiJodHRwczovL2RzcGFjZS5taXQuZWR1L2hhbmRsZS8xNzIxLjEvNjUwNjYiLCJzdW1tYXJ5IjpbIkFuIHVuZGVybHlpbmcgZ29hbCBvZiBzeW50aGV0aWMgYmlvbG9neSBpcyB0byBtYWtlIHRoZSBwcm9jZXNzIG9mIGVuZ2luZWVyaW5nIGJpb2xvZ2ljYWwgc3lzdGVtcyBlYXNpZXIgYW5kIG1vcmUgcmVsaWFibGUuIEluIHN1cHBvcnQgb2YgdGhpcyBnb2FsLCB3ZSBkZXZlbG9wZWQgQmlvQnJpY2sgYXNzZW1ibHkgc3RhbmRhcmQgMTAgdG8gZW5hYmxlIHRoZSBjb25zdHJ1Y3Rpb24gb2Ygc3lzdGVtcyBmcm9tIHN0YW5kYXJkaXplZCBnZW5ldGljIHBhcnRzLiBUaGUgQmlvQnJpY2sgc3RhbmRhcmQgdW5kZXJwaW5zIHRoZSBkaXN0cmlidXRlZCBlZmZvcnRzIGJ5IHRoZSBzeW50aGV0aWMgYmlvbG9neSByZXNlYXJjaCBjb21tdW5pdHkgdG8gZGV2ZWxvcCBhIGNvbGxlY3Rpb24gb2YgbW9yZSB0aGFuIDYwMDAgc3RhbmRhcmQgZ2VuZXRpYyBwYXJ0cyBhdmFpbGFibGUgZnJvbSB0aGUgUmVnaXN0cnkgb2YgU3RhbmRhcmQgQmlvbG9naWNhbCBQYXJ0cy4gSGVyZSwgd2UgZGVzY3JpYmUgdGhlIHRocmVlIGFudGliaW90aWMgYXNzZW1ibHkgbWV0aG9kIGZvciBwaHlzaWNhbCBjb21wb3NpdGlvbiBvZiBCaW9CcmljayBwYXJ0cyBhbmQgcHJvdmlkZSBzdGVwLWJ5LXN0ZXAgcHJvdG9jb2xzLiBUaGUgbWV0aG9kIHJlbGllcyBvbiBhIGNvbWJpbmF0aW9uIG9mIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSBzZWxlY3Rpb24gdG8gZWxpbWluYXRlIHRpbWUtIGFuZCBsYWJvci1pbnRlbnNpdmUgc3RlcHMgc3VjaCBhcyBjb2x1bW4gY2xlYW51cCBhbmQgYWdhcm9zZSBnZWwgcHVyaWZpY2F0aW9uIG9mIEROQSBkdXJpbmcgcGFydCBhc3NlbWJseS4iXX0seyJ0aW1kZXhSZWNvcmRJZCI6ImRzcGFjZToxNzIxLjEtNTg3MzciLCJ0aXRsZSI6IlRyYW5zZGVybWFsIG1pY3JvY29uZHVpdHMgYnkgbWljcm9zY2lzc2lvbiBmb3IgZHJ1ZyBkZWxpdmVyeSBhbmQgc2FtcGxlIGFjcXVpc2l0aW9uIiwiY29udGVudFR5cGUiOlsiQXJ0aWNsZSJdLCJjb250cmlidXRvcnMiOlt7ImtpbmQiOiJhdXRob3IiLCJ2YWx1ZSI6IkdvbnphbGV6LCBTYWx2YWRvciJ9LHsia2luZCI6ImF1dGhvciIsInZhbHVlIjoiSGVybmRvbiwgVGVycnkgTy4ifSx7ImtpbmQiOiJhdXRob3IiLCJ2YWx1ZSI6Ikdvd3Jpc2hhbmthciwgVGhpcnV2YWxsdXIgUi4ifSx7ImtpbmQiOiJhdXRob3IiLCJ2YWx1ZSI6IkFuZGVyc29uLCBSLiBSb3gifSx7ImtpbmQiOiJhdXRob3IiLCJ2YWx1ZSI6IldlYXZlciwgSmFtZXMgQy4ifSx7ImtpbmQiOiJkZXBhcnRtZW50IiwidmFsdWUiOiJIYXJ2YXJkIFVuaXZlcnNpdHktLU1JVCBEaXZpc2lvbiBvZiBIZWFsdGggU2NpZW5jZXMgYW5kIFRlY2hub2xvZ3kifSx7ImtpbmQiOiJtaXRhdXRob3IiLCJ2YWx1ZSI6Ikhlcm5kb24sIFRlcnJ5IE8uIn0seyJraW5kIjoibWl0YXV0aG9yIiwidmFsdWUiOiJHb256YWxleiwgU2FsdmFkb3IifSx7ImtpbmQiOiJtaXRhdXRob3IiLCJ2YWx1ZSI6Ikdvd3Jpc2hhbmthciwgVGhpcnV2YWxsdXIgUi4ifSx7ImtpbmQiOiJtaXRhdXRob3IiLCJ2YWx1ZSI6IkFuZGVyc29uLCBSLiBSb3gifSx7ImtpbmQiOiJtaXRhdXRob3IiLCJ2YWx1ZSI6IldlYXZlciwgSmFtZXMgQy4ifV0sInB1YmxpY2F0aW9uSW5mb3JtYXRpb24iOlsiQmlvTWVkIENlbnRyYWwgTHRkIl0sImRhdGVzIjpbeyJraW5kIjoiUHVibGljYXRpb24gZGF0ZSIsInZhbHVlIjoiMjAwNC0wNCJ9XSwibGlua3MiOlt7ImtpbmQiOiJEaWdpdGFsIG9iamVjdCBVUkwiLCJyZXN0cmljdGlvbnMiOm51bGwsInRleHQiOiJEaWdpdGFsIG9iamVjdCBVUkwiLCJ1cmwiOiJodHRwOi8vaGRsLmhhbmRsZS5uZXQvMTcyMS4xLzU4NzM3In1dLCJub3RlcyI6bnVsbCwiaGlnaGxpZ2h0IjpbeyJtYXRjaGVkRmllbGQiOiJpZGVudGlmaWVycy52YWx1ZSIsIm1hdGNoZWRQaHJhc2VzIjpbIlx1MDAzY3NwYW4gY2xhc3M9XCJoaWdobGlnaHRcIlx1MDAzZVBNSURcdTAwM2Mvc3Bhblx1MDAzZTogMTUwOTAwNjMiXX1dLCJwcm92aWRlciI6bnVsbCwicmlnaHRzIjpbeyJraW5kIjoidXNlQW5kUmVwcm9kdWN0aW9uIiwiZGVzY3JpcHRpb24iOiJDcmVhdGl2ZSBDb21tb25zIEF0dHJpYnV0aW9uIiwidXJpIjpudWxsfV0sInNvdXJjZUxpbmsiOiJodHRwczovL2RzcGFjZS5taXQuZWR1L2hhbmRsZS8xNzIxLjEvNTg3MzciLCJzdW1tYXJ5IjpbIkJhY2tncm91bmQgUGFpbmxlc3MsIHJhcGlkLCBjb250cm9sbGVkLCBtaW5pbWFsbHkgaW52YXNpdmUgbW9sZWN1bGFyIHRyYW5zcG9ydCBhY3Jvc3MgaHVtYW4gc2tpbiBmb3IgZHJ1ZyBkZWxpdmVyeSBhbmQgYW5hbHl0ZSBhY3F1aXNpdGlvbiBpcyBvZiB3aWRlc3ByZWFkIGludGVyZXN0LiBDcmVhdGlvbiBvZiBtaWNyb2NvbmR1aXRzIHRocm91Z2ggdGhlIHN0cmF0dW0gY29ybmV1bSBhbmQgZXBpZGVybWlzIGlzIGFjaGlldmVkIGJ5IHN0b2NoYXN0aWMgc2Npc3Npb25pbmcgZXZlbnRzIGxvY2FsaXplZCB0byB0eXBpY2FsbHkgMjUwIM68bSBkaWFtZXRlciBhcmVhcyBvZiBodW1hbiBza2luIGluIHZpdm8uIE1ldGhvZHMgTWljcm9zY2lzc2lvbmluZyBpcyBhY2hpZXZlZCBieSBhIGxpbWl0ZWQgZmx1eCBvZiBhY2NlbGVyYXRlZCBnYXM6IDI1IM68bSBpbmVydCBwYXJ0aWNsZXMgcGFzc2luZyB0aHJvdWdoIHRoZSBhcGVydHVyZSBpbiBhIG1hc2sgaGVsZCBhZ2FpbnN0IHRoZSBzdHJhdHVtIGNvcm5ldW0uIFRoZSBwYXJ0aWNsZXMgc2NpemUgKGN1dCkgdGlzc3VlLCB3aGljaCBpcyByZW1vdmVkIGJ5IHRoZSBnYXMgZmxvdyB3aXRoIHRoZSBzZW5zYXRpb24gb2YgYSBnZW50bGUgc3RyZWFtIG9mIGFpciBhZ2FpbnN0IHRoZSBza2luLiBUaGUgcmVzdWx0aW5nIG1pY3JvY29uZHVpdCBpcyBmdWxseSBvcGVuIGFuZCBtYXkgYmUgYmV0d2VlbiA1MCBhbmQgMjAwIM68bSBkZWVwLiBSZXN1bHRzIEluIHZpdm8gYWR1bHQgaHVtYW4gdGVzdHMgc2hvdyB0aGF0IG1pY3JvY29uZHVpdHMgcmVkdWNlIHRoZSBlbGVjdHJpY2FsIGltcGVkYW5jZSBiZXR3ZWVuIHR3byBFQ0cgZWxlY3Ryb2RlcyBmcm9tIGFwcHJveGltYXRlbHkgNCwwMDAgzqkgdG8gNTAwIM6pLiBEcnVnIGRlbGl2ZXJ5IGhhcyBiZWVuIGRlbW9uc3RyYXRlZCBpbiB2aXZvIGJ5IGFwcGx5aW5nIGxpZG9jYWluZSB0byBhIG1pY3JvY29uZHVpdCBmcm9tIGEgY290dG9uIHN3YWIuIFNoYXJwIHBvaW50IHByb2JpbmcgZGVtb25zdHJhdGVkIGZ1bGwgYW5hZXN0aGVzaWEgYXJvdW5kIHRoZSBzaXRlIHdpdGhpbiB0aHJlZSBtaW51dGVzLiBUb3BpY2FsIGFwcGxpY2F0aW9uIHdpdGhvdXQgdGhlIG1pY3JvY29uZHVpdCByZXF1aXJlZCBhcHByb3hpbWF0ZWx5IDEuNSBob3Vycy4gQXBwcm94aW1hdGVseSAxODAgzrxtIGRlZXAgbWljcm9jb25kdWl0cyBpbiB2aXZvIHlpZWxkZWQgYmxvb2Qgc2FtcGxlIHZvbHVtZXMgb2Ygc2V2ZXJhbCDOvGwsIHdpdGggYSBmYWludCBwcmlja2luZyBzZW5zYXRpb24gYXMgYmxvb2QgZW50ZXJzIHRpc3N1ZS4gQmxvb2QgZ2x1Y29zZSBtZWFzdXJlbWVudHMgd2VyZSB0YWtlbiB3aXRoIHR3byBjb21tZXJjaWFsIG1vbml0b3Jpbmcgc3lzdGVtcy4gTWljcm9jb25kdWl0cyBhcmUgaW52aXNpYmxlIHRvIHRoZSB1bmFpZGVkIGV5ZSwgZGV2ZWxvcGluZyBhIHNsaWdodCBlcnl0aGVtYXRvdXMgbWFjdWxlIHRoYXQgZGlzYXBwZWFycyBvdmVyIGRheXMuIENvbmNsdXNpb24gTWljcm9zY2lzc2lvbmVkIG1pY3JvY29uZHVpdHMgbWF5IHByb3ZpZGUgYSBtaW5pbWFsbHkgaW52YXNpdmUgYmFzaXMgZm9yIGRlbGl2ZXJ5IG9mIGFueSBzaXplIG1vbGVjdWxlLCBhbmQgZm9yIGV4dHJhY3Rpb24gb2YgaW50ZXJzdGl0aWFsIGZsdWlkIGFuZCBibG9vZCBzYW1wbGVzLiBTdWNoIG1pY3JvY29uZHVpdHMgcmVkdWNlIHRocm91Z2gtc2tpbiBlbGVjdHJpY2FsIGltcGVkYW5jZSwgaGF2ZSBjb250cm9sbGFibGUgZGlhbWV0ZXIgYW5kIGRlcHRoLCBhcmUgZnVsbHkgb3BlbiBhbmQsIGFmdGVyIGhlYWxpbmcsIG5vIGZvcmVpZ24gYm9kaWVzIHdlcmUgdmlzaWJsZSB1c2luZyB0aHJvdWdoLXNraW4gY29uZm9jYWwgbWljcm9zY29weS4gSW4gc3ViamVjdHMgdG8gZGF0ZSwgbWljcm9zY2lzc2lvbmluZyBpcyBwYWlubGVzcyBhbmQgcmFwaWQuIl19LHsidGltZGV4UmVjb3JkSWQiOiJ6ZW5vZG86NjY1NTY5MiIsInRpdGxlIjoiREFEQTIgZm9ybWF0dGVkIDE2UyByUk5BIGdlbmUgc2VxdWVuY2VzIGZvciBib3RoIGJhY3RlcmlhIFx1MDAyNiBhcmNoYWVhIiwiY29udGVudFR5cGUiOlsiRGF0YXNldCJdLCJjb250cmlidXRvcnMiOlt7ImtpbmQiOiJDcmVhdG9yIiwidmFsdWUiOiJBbGkgQWxpc2h1bSJ9LHsia2luZCI6IkNvbnRhY3RQZXJzb24iLCJ2YWx1ZSI6IkFsaSBBbGlzaHVtIn0seyJraW5kIjoiT3RoZXIiLCJ2YWx1ZSI6IlNlZXJzaG9sbSBGcmVkZXJpayJ9LHsia2luZCI6IkRhdGFDdXJhdG9yIiwidmFsdWUiOiJHcmVlbmZpZWxkIFBhdWwifSx7ImtpbmQiOiJSZXNlYXJjaGVyIiwidmFsdWUiOiJDaHJpc3RvcGhlcnNlbiBDbGF1cyJ9XSwicHVibGljYXRpb25JbmZvcm1hdGlvbiI6WyJaZW5vZG8iXSwiZGF0ZXMiOlt7ImtpbmQiOiJQdWJsaWNhdGlvbiBkYXRlIiwidmFsdWUiOiIyMDIyIn0seyJraW5kIjoiSXNzdWVkIiwidmFsdWUiOiIyMDIyLTA2LTE3In1dLCJsaW5rcyI6W3sia2luZCI6IkRpZ2l0YWwgb2JqZWN0IFVSTCIsInJlc3RyaWN0aW9ucyI6bnVsbCwidGV4dCI6IkRpZ2l0YWwgb2JqZWN0IFVSTCIsInVybCI6Imh0dHBzOi8vemVub2RvLm9yZy9yZWNvcmQvNjY1NTY5MiJ9XSwibm90ZXMiOlt7ImtpbmQiOiJPdGhlciIsInZhbHVlIjpbIkJhc2ggc2NyaXB0IGNhbiBiZSBwcm92aWRlZCBvbiByZXF1ZXN0LiJdfSx7ImtpbmQiOiJPdGhlciIsInZhbHVlIjpbIntcInJlZmVyZW5jZXNcIjogW1wiUGFya3MsIEQuIEguLCBldCBhbC4gKDIwMTgpLiBcXFwiQSBzdGFuZGFyZGl6ZWQgYmFjdGVyaWFsIHRheG9ub215IGJhc2VkIG9uIGdlbm9tZSBwaHlsb2dlbnkgc3Vic3RhbnRpYWxseSByZXZpc2VzIHRoZSB0cmVlIG9mIGxpZmUuXFxcIiBOYXR1cmUgQmlvdGVjaG5vbG9neS5cIiwgXCJDb2xlLCBKLiBSLiwgUS4gV2FuZywgSi4gQS4gRmlzaCwgQi4gQ2hhaSwgRC4gTS4gTWNHYXJyZWxsLCBZLiBTdW4sIEMuIFQuIEJyb3duLCBBLiBQb3JyYXMtQWxmYXJvLCBDLiBSLiBLdXNrZSwgYW5kIEouIE0uIFRpZWRqZS4gMjAxNC4gUmlib3NvbWFsIERhdGFiYXNlIFByb2plY3Q6IGRhdGEgYW5kIHRvb2xzIGZvciBoaWdoIHRocm91Z2hwdXQgclJOQSBhbmFseXNpcyBOdWNsLiBBY2lkcyBSZXMuIDQyKERhdGFiYXNlIGlzc3VlKTpENjMzLUQ2NDI7IGRvaTogMTAuMTA5My9uYXIvZ2t0MTI0NCBbUE1JRDogMjQyODgzNjhdXCIsIFwiTkNCSSAxNlMgUmVmU2VxIE51Y2xlb3RpZGUgc2VxdWVuY2UgcmVjb3JkczogaHR0cHM6Ly93d3cubmNiaS5ubG0ubmloLmdvdi9udWNjb3JlP3Rlcm09MzMxNzUlNUJCaW9Qcm9qZWN0JTVEK09SKzMzMzE3JTVCQmlvUHJvamVjdCU1RFwiXX0iXX1dLCJoaWdobGlnaHQiOlt7Im1hdGNoZWRGaWVsZCI6Im5vdGVzLnZhbHVlIiwibWF0Y2hlZFBocmFzZXMiOlsiQWNpZHMgUmVzLiA0MihEYXRhYmFzZSBpc3N1ZSk6RDYzMy1ENjQyOyBkb2k6IDEwLjEwOTMvbmFyL2drdDEyNDQgW1x1MDAzY3NwYW4gY2xhc3M9XCJoaWdobGlnaHRcIlx1MDAzZVBNSURcdTAwM2Mvc3Bhblx1MDAzZTogMjQyODgzNjhdXCIsIFwiTkNCSSAxNlMgUmVmU2VxIl19XSwicHJvdmlkZXIiOm51bGwsInJpZ2h0cyI6W3sia2luZCI6bnVsbCwiZGVzY3JpcHRpb24iOiJDcmVhdGl2ZSBDb21tb25zIEF0dHJpYnV0aW9uIDQuMCBJbnRlcm5hdGlvbmFsIiwidXJpIjoiaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzQuMC9sZWdhbGNvZGUifSx7ImtpbmQiOm51bGwsImRlc2NyaXB0aW9uIjoiT3BlbiBBY2Nlc3MiLCJ1cmkiOiJpbmZvOmV1LXJlcG8vc2VtYW50aWNzL29wZW5BY2Nlc3MifV0sInNvdXJjZUxpbmsiOiJodHRwczovL3plbm9kby5vcmcvcmVjb3JkLzY2NTU2OTIiLCJzdW1tYXJ5IjpbIlx1MDAzY3BcdTAwM2VcdTAwM2NzdHJvbmdcdTAwM2VcdTAwM2NlbVx1MDAzZVRoaXMgdmVyc2lvbiBpcyB0byBzdGF5IHVwIHRvIGRhdGUgd2l0aCB0aGUgaW1wcm92ZW1lbnRzIGFuZCBpbmNyZWFzZSBpbjE2UyByUk5BIGdlbmUgc2VxdWVuY2VzIGFkZGVkIHRvIHRoZSBHVERCXHUwMDI2bmJzcDtyZWxlYXNlIDIwNy5cdTAwMjZuYnNwOyBQbGVhc2UgcmVhZCB0aGlzIHBvc3QgZm9yIHRoZSBzdGF0cyBvbiB0aGUgdXBkYXRlcy5cdTAwMjZuYnNwO1x1MDAzYy9lbVx1MDAzZVx1MDAzYy9zdHJvbmdcdTAwM2VcdTAwM2NzdHJvbmdcdTAwM2VcdTAwM2NlbVx1MDAzZWh0dHBzOi8vZ3RkYi5lY29nZW5vbWljLm9yZy9zdGF0cy9yMjA3XHUwMDNjL2VtXHUwMDNlXHUwMDNjL3N0cm9uZ1x1MDAzZVx1MDAzY3N0cm9uZ1x1MDAzZVx1MDAzY2VtXHUwMDNlLlx1MDAzYy9lbVx1MDAzZVx1MDAzYy9zdHJvbmdcdTAwM2VcdTAwM2NzdHJvbmdcdTAwM2VcdTAwM2NlbVx1MDAzZSBcdTAwM2MvZW1cdTAwM2VcdTAwM2Mvc3Ryb25nXHUwMDNlXHUwMDNjL3BcdTAwM2VcblxuXHUwMDNjcFx1MDAzZVx1MDAzY3N0cm9uZ1x1MDAzZVx1MDAzY2VtXHUwMDNlVGhlcmUgaGFzIGJlZW4gbm8gY2hhbmdlIHRvIHRoZSBSRFAtUmVmU2VxIHJlZmVyZW5jZSBkYXRhYmFzZVx1MDAzYy9lbVx1MDAzZVx1MDAzYy9zdHJvbmdcdTAwM2VcdTAwM2MvcFx1MDAzZVxuXG5cdTAwM2NwXHUwMDNlXHUwMDNjc3Ryb25nXHUwMDNlXHUwMDNjZW1cdTAwM2VJZiBhbnlvbmUgaGFzIGNvbmNlcm5zXHUwMDI2bmJzcDt3aXRoIE1BRyBleHRyYWN0ZWQgMTZTIHJSTkEgZ2VuZSBjb250YW1pbmF0aW9uIGNvbmNlcm5zLCB0aGVuIEkgc3VnZ2VzdCB0aGF0IHRoZXkgY29udGFjdCB0aGUgY3VyYXRvcnMgb2YgR1REQiB0aGVtc2VsdmVzIGJlY2F1c2UgaXQgaXMgb3V0c2lkZSBvZiBteSByb2xlIHdpdGggdGhlc2UgcmVzb3VyY2VzIGRlc2lnbmVkIGZvciBEQURBMiB1c2FnZSBvbmx5LiBcdTAwM2MvZW1cdTAwM2VcdTAwM2Mvc3Ryb25nXHUwMDNlXHUwMDNjL3BcdTAwM2VcblxuXHUwMDNjcFx1MDAzZVx1MDAzY3N0cm9uZ1x1MDAzZVx1MDAzY2VtXHUwMDNlQW5vdGhlciBjb25jZXJuIHRoYXQgd2FzIHJhaXNlZCB3YXMgdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBEQiBzZXF1ZW5jZXMsIHRvIGdldCBwYXN0IHRoaXMgcHJvYmxlbSBwbGVhc2UgdXNlIHRoZSB0cnlSQyA9IFRSVUUgYXJndW1lbnQgaW4gdGhlIGFzc2lnblRheG9ub215IGNvbW1hbmQgd2l0aGluIERBREEyLCB0aGlzIHdpbGwgc2VhcmNoIHlvdXIgQVNWcyBpbiB0aGUgcmV2ZXJzZSBjb21wbGVtZW50IGFzIHdlbGwuXHUwMDI2bmJzcDtcdTAwMjZuYnNwO1x1MDAzYy9lbVx1MDAzZVx1MDAzYy9zdHJvbmdcdTAwM2VcdTAwM2MvcFx1MDAzZVxuXG5cdTAwM2NwXHUwMDNlXHUwMDI2bmJzcDtcdTAwM2MvcFx1MDAzZVxuXG5cdTAwM2NwXHUwMDNlVGhpcyBWZXJzaW9uIHdhcyBwcmltYXJpbHkgdXBkYXRlZCBiZWNhdXNlIHdlIGhhdmUgcmVjZW50bHkgdXBkYXRlZCB0aGUgUmVmU2VxK1JEUCBkYXRhYmFzZSBhbmQgYWxzbyBpbmNsdWRlZCBtaXRvY2hvbmRyaWFsIGFuZCBldWthcnlvdGljIDE2UyByUk5BIHNlcXVlbmNlcy5cdTAwMjZuYnNwO0Fsc28gYmVjYXVzZSBJXHUwMDI2bmJzcDtkZWNpZGVkIHRvIGluY2x1ZGUgdGhlIHJlcXVpcmVkIGZvcm1hdHMgdG8gYmUgYWJsZSB0byB1c2UgdGhlIGFkZFNwZWNpZXMgY29tbWFuZCBpbiBEQURBMi4gVGhpcyBjb21tYW5kIHNlYXJjaGVzIHRoZSBkYXRhYmFzZSBhdCAxMDAlIGlkZW50aXR5IGFuZCBoYXMgdGhlIGZsZXhpYmlsaXR5IHRvIGVpdGhlciBnZXQgdGhlIGJlc3QgaGl0IG9yIG11bHRpcGxlIGhpdHMgdG8geW91ciBhbXBsaWNvbi4gSSByZWNvbW1lbmQgaXQgaWYgeW91IGFyZSB1c2luZyBhIHNpbmdsZSBvciAyIHJlZ2lvbiBhbXBsaWNvbnMgb2YgdGhlIDE2UyByUk5BIGdlbmUuXHUwMDNjL3BcdTAwM2VcblxuXHUwMDNjcFx1MDAzZVRoZXNlIHR3byBjb21iaW5lZCBiYWN0ZXJpYWwgYW5kIGFyY2hhZWFsIDE2UyByUk5BIGdlbmUgc2VxdWVuY2UgZGF0YWJhc2VzIHdlcmUgY29sbGF0ZWQgZnJvbSB2YXJpb3VzIHNvdXJjZXMgYW5kIGZvcm1hdHRlZCBmb3IgdGhlIHB1cnBvc2Ugb2YgdXNpbmcgdGhlIFx1MDAyNnF1b3Q7YXNzaWduVGF4b25vbXlcdTAwMjZxdW90OyBjb21tYW5kIHdpdGhpbiB0aGUgREFEQTJcdTAwMjZuYnNwO3BpcGVsaW5lLlx1MDAyNm5ic3A7VGhlIGRhdGEgd2FzIGNvbnZlcnRlZCB0byBzdWl0ZSBEQURBMiBmb3JtYXQgYnkgQWxpc2h1bSBBbGkuXHUwMDNjL3BcdTAwM2VcblxuXHUwMDNjb2xcdTAwM2Vcblx0XHUwMDNjbGlcdTAwM2VSZWZTZXErUkRQOiBUaGlzIGRhdGFiYXNlIGNvbnRhaW5zIDIyNDMzXHUwMDI2bmJzcDtiYWN0ZXJpYWwsXHUwMDI2bmJzcDsxMDU1XHUwMDI2bmJzcDthcmNoYWVhIGFuZCA5OSBldWthcnlvdGljXHUwMDI2bmJzcDtmdWxsIGxlbmd0aHMxNlMgclJOQSBnZW5lIHNlcXVlbmNlcy5cdTAwMjZuYnNwOyBJdCB3YXMgY29tcGlsZWQgYnkgXHUwMDNjc3Ryb25nXHUwMDNlUGF1bCBHcmVlbmZpZWxkIFx1MDAzYy9zdHJvbmdcdTAwM2VvbiB0aGVcdTAwMjZuYnNwO1x1MDAzY3N0cm9uZ1x1MDAzZTA2LzExLzIwMjBcdTAwM2Mvc3Ryb25nXHUwMDNlXHUwMDI2bmJzcDtmcm9tIHByZWRvbWluYW50bHkgdGhlIE5DQkkgUmVmU2VxIDE2UyByUk5BIGRhdGFiYXNlIChodHRwczovL3d3dy5uY2JpLm5sbS5uaWguZ292L3JlZnNlcS90YXJnZXRlZGxvY2kvMTZTX3Byb2Nlc3MvKVx1MDAyNm5ic3A7YW5kIHdhcyBzdXBwbGVtZW50ZWQgd2l0aCBleHRyYVx1MDAyNm5ic3A7c2VxdWVuY2VzIGZyb20gdGhlXHUwMDI2bmJzcDtSRFAgZGF0YWJhc2UgKGh0dHBzOi8vcmRwLmNtZS5tc3UuZWR1L21pc2MvcmVzb3VyY2VzLmpzcCkuXHUwMDNjL2xpXHUwMDNlXG5cdFx1MDAzY2xpXHUwMDNlR2Vub21lIFRheG9ub215IERhdGFiYXNlIChHVERCKTogVGhlIG5ldyB2ZXJzaW9uIG9mIG91ciBkYWRhMiBmb3JtYXR0ZWQgR1REQiByZWZlcmVuY2Ugc2VxdWVuY2VzIG5vdyBjb250YWlucyAzMTMxOVx1MDAyNm5ic3A7YmFjdGVyaWEgYW5kIDE1NjVcdTAwMjZuYnNwO2FyY2hhZWEgZnVsbCAxNlMgclJOQSBnZW5lIHNlcXVlbmNlcy5cdTAwMjZuYnNwO0lmIHlvdSB3b25kZXIgd2h5IHRoZXJlIGFyZSBmZXdlciBzcGVjaWVzIHdpdGggMTZTIHJSTkEsIHRoYXQgaXMgYmVjYXVzZSBzb21lIG1ldGFnZW5vbWljcyBhc3NlbWJsZWQgZ2Vub21lcyAoTUFHcykgbGFja1x1MDAyNm5ic3A7dGhlIDE2UyBnZW5lIGFuZCB0aHVzIGNhbm5vdCBiZSBleHRyYWN0ZWQuXHUwMDI2bmJzcDsgVGhlIGRhdGFiYXNlIHdhcyBkb3dubG9hZGVkIGZyb20gXHUwMDNjYSBocmVmPVwiaHR0cHM6Ly9kYXRhLmFjZS51cS5lZHUuYXUvcHVibGljL2d0ZGIvZGF0YS9yZWxlYXNlcy9yZWxlYXNlOTUvXCJcdTAwM2VodHRwczovL2RhdGEuYWNlLnVxLmVkdS5hdS9wdWJsaWMvZ3RkYi9kYXRhL3JlbGVhc2VzL1x1MDAzYy9hXHUwMDNlXHUwMDI2bmJzcDtvbiAyOC8wNC8yMDIwLlx1MDAyNm5ic3A7UGxlYXNlIHJlYWQgdGhlIHJlbGVhc2Ugbm90ZXMgYW5kIGZpbGUgZGVzY3JpcHRpb25zLlx1MDAyNm5ic3A7XHUwMDNjL2xpXHUwMDNlXG5cdTAwM2Mvb2xcdTAwM2VcblxuXHUwMDNjcFx1MDAzZVRoZSBmb3JtYXR0aW5nIHRvIERBREEyXHUwMDI2bmJzcDt3YXMgZG9uZSB1c2luZyBzaW1wbGUgYXdrIGJhc2ggc2NyaXB0cy4gVGhlIHNjcmlwdFx1MDAyNm5ic3A7dGFrZXNcdTAwMjZuYnNwO2FzIGlucHV0IGFcdTAwMjZuYnNwO2Zhc3RhXHUwMDI2bmJzcDtmaWxlIGFuZCBhIHRhYi1kZWxpbWl0ZWQgdGF4b25vbXkgZmlsZVx1MDAyNm5ic3A7KHNsaWdodGx5IGVkaXRlZCB0byByZW1vdmUgc3BlY2lhbCBjaGFyYWN0ZXJzKSBhbmQgdGhlbiBpdFx1MDAyNm5ic3A7b3V0cHV0cyBhIGZhc3RhIGZpbGUgd2l0aCBhbGwgNyB0YXhvbm9teSByYW5rcyBzZXBhcmF0ZWQgYnkgXHUwMDI2cXVvdDs7XHUwMDI2cXVvdDsgYXMgcmVxdWlyZWQgZm9yIERBREEyIGNvbXBhdGliaWxpdHkuIEFkZGl0aW9uYWxseSxcdTAwMjZuYnNwO3dlIGhhdmUgY29uY2F0ZW5hdGVkXHUwMDI2bmJzcDt0aGUgdW5pcXVlXHUwMDI2bmJzcDtzZXF1ZW5jZSBJRCBiZSBpdCBOQ0JJL1JEUCBvciBHVERCXHUwMDI2bmJzcDtJRCB0byB0aGUgc3BlY2llcyBlbnRyeSAoYnV0IHJlcGxhY2VkIHRoZSBcdTAwMjZxdW90Oy5cdTAwMjZxdW90OyB3aXRoIGFuIFx1MDAyNnF1b3Q7IF9cdTAwMjZxdW90Oy4gV2Ugc2VlIHRoaXMgYXMgYW4gaW1wb3J0YW50IFFDIHN0ZXAgdG8gaGlnaGxpZ2h0IHRoZSBpc3N1ZXMvY29uZmlkZW5jZSBhc3NvY2lhdGVkIHdpdGggc2hvcnQgcmVhZCB0YXhvbm9teSBhc3NpZ25tZW50IGF0IHRoZSBmaW5lciByYW5rIGxldmVscy5cdTAwM2MvcFx1MDAzZVxuXG5cdTAwM2NwXHUwMDNlQWxzbywgdGhpcyB1cGRhdGUgaW5jbHVkZXMgdHdvIG90aGVyIGZpbGVzIHRoYXQgeW91IGNhbiB1c2Ugd2l0aCB0aGUgYXNzaWduVGF4b25vbXkgYW5kIGFkZFNwZWNpZXMgY29tbWFuZHMgaW4gREFEQTIuXHUwMDNjL3BcdTAwM2UiXX0seyJ0aW1kZXhSZWNvcmRJZCI6Inplbm9kbzo0NDA5NDM5IiwidGl0bGUiOiJEQURBMiBmb3JtYXR0ZWQgMTZTIHJSTkEgZ2VuZSBzZXF1ZW5jZXMgZm9yIGJvdGggYmFjdGVyaWEgXHUwMDI2IGFyY2hhZWEiLCJjb250ZW50VHlwZSI6WyJEYXRhc2V0Il0sImNvbnRyaWJ1dG9ycyI6W3sia2luZCI6IkNyZWF0b3IiLCJ2YWx1ZSI6IkFsaSBBbGlzaHVtIn0seyJraW5kIjoiQ29udGFjdFBlcnNvbiIsInZhbHVlIjoiQWxpIEFsaXNodW0ifSx7ImtpbmQiOiJPdGhlciIsInZhbHVlIjoiU2VlcnNob2xtIEZyZWRlcmlrIn0seyJraW5kIjoiRGF0YUN1cmF0b3IiLCJ2YWx1ZSI6IkdyZWVuZmllbGQgUGF1bCJ9LHsia2luZCI6IlJlc2VhcmNoZXIiLCJ2YWx1ZSI6IkNocmlzdG9waGVyc2VuIENsYXVzIn1dLCJwdWJsaWNhdGlvbkluZm9ybWF0aW9uIjpbIlplbm9kbyJdLCJkYXRlcyI6W3sia2luZCI6IlB1YmxpY2F0aW9uIGRhdGUiLCJ2YWx1ZSI6IjIwMjEifSx7ImtpbmQiOiJJc3N1ZWQiLCJ2YWx1ZSI6IjIwMjEtMDEtMDIifV0sImxpbmtzIjpbeyJraW5kIjoiRGlnaXRhbCBvYmplY3QgVVJMIiwicmVzdHJpY3Rpb25zIjpudWxsLCJ0ZXh0IjoiRGlnaXRhbCBvYmplY3QgVVJMIiwidXJsIjoiaHR0cHM6Ly96ZW5vZG8ub3JnL3JlY29yZC80NDA5NDM5In1dLCJub3RlcyI6W3sia2luZCI6Ik90aGVyIiwidmFsdWUiOlsiQmFzaCBzY3JpcHQgY2FuIGJlIHByb3ZpZGVkIG9uIHJlcXVlc3QuIl19LHsia2luZCI6Ik90aGVyIiwidmFsdWUiOlsie1wicmVmZXJlbmNlc1wiOiBbXCJQYXJrcywgRC4gSC4sIGV0IGFsLiAoMjAxOCkuIFxcXCJBIHN0YW5kYXJkaXplZCBiYWN0ZXJpYWwgdGF4b25vbXkgYmFzZWQgb24gZ2Vub21lIHBoeWxvZ2VueSBzdWJzdGFudGlhbGx5IHJldmlzZXMgdGhlIHRyZWUgb2YgbGlmZS5cXFwiIE5hdHVyZSBCaW90ZWNobm9sb2d5LlwiLCBcIkNvbGUsIEouIFIuLCBRLiBXYW5nLCBKLiBBLiBGaXNoLCBCLiBDaGFpLCBELiBNLiBNY0dhcnJlbGwsIFkuIFN1biwgQy4gVC4gQnJvd24sIEEuIFBvcnJhcy1BbGZhcm8sIEMuIFIuIEt1c2tlLCBhbmQgSi4gTS4gVGllZGplLiAyMDE0LiBSaWJvc29tYWwgRGF0YWJhc2UgUHJvamVjdDogZGF0YSBhbmQgdG9vbHMgZm9yIGhpZ2ggdGhyb3VnaHB1dCByUk5BIGFuYWx5c2lzIE51Y2wuIEFjaWRzIFJlcy4gNDIoRGF0YWJhc2UgaXNzdWUpOkQ2MzMtRDY0MjsgZG9pOiAxMC4xMDkzL25hci9na3QxMjQ0IFtQTUlEOiAyNDI4ODM2OF1cIiwgXCJOQ0JJIDE2UyBSZWZTZXEgTnVjbGVvdGlkZSBzZXF1ZW5jZSByZWNvcmRzOiBodHRwczovL3d3dy5uY2JpLm5sbS5uaWguZ292L251Y2NvcmU/dGVybT0zMzE3NSU1QkJpb1Byb2plY3QlNUQrT1IrMzMzMTclNUJCaW9Qcm9qZWN0JTVEXCJdfSJdfV0sImhpZ2hsaWdodCI6W3sibWF0Y2hlZEZpZWxkIjoibm90ZXMudmFsdWUiLCJtYXRjaGVkUGhyYXNlcyI6WyJBY2lkcyBSZXMuIDQyKERhdGFiYXNlIGlzc3VlKTpENjMzLUQ2NDI7IGRvaTogMTAuMTA5My9uYXIvZ2t0MTI0NCBbXHUwMDNjc3BhbiBjbGFzcz1cImhpZ2hsaWdodFwiXHUwMDNlUE1JRFx1MDAzYy9zcGFuXHUwMDNlOiAyNDI4ODM2OF1cIiwgXCJOQ0JJIDE2UyBSZWZTZXEiXX1dLCJwcm92aWRlciI6bnVsbCwicmlnaHRzIjpbeyJraW5kIjpudWxsLCJkZXNjcmlwdGlvbiI6IkNyZWF0aXZlIENvbW1vbnMgQXR0cmlidXRpb24gNC4wIEludGVybmF0aW9uYWwiLCJ1cmkiOiJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnkvNC4wL2xlZ2FsY29kZSJ9LHsia2luZCI6bnVsbCwiZGVzY3JpcHRpb24iOiJPcGVuIEFjY2VzcyIsInVyaSI6ImluZm86ZXUtcmVwby9zZW1hbnRpY3Mvb3BlbkFjY2VzcyJ9XSwic291cmNlTGluayI6Imh0dHBzOi8vemVub2RvLm9yZy9yZWNvcmQvNDQwOTQzOSIsInN1bW1hcnkiOlsiXHUwMDNjcFx1MDAzZVx1MDAzY3N0cm9uZ1x1MDAzZVx1MDAzY2VtXHUwMDNlVGhpcyBpcyBhbiB1cGRhdGUgdG8gdGhlIGxhdGVzdCB2ZXJzaW9uIGZyb20gdGhlIDE5LzEyLzIwMjAsIHdoZXJlIGkgaGF2ZSBtYWRlIGEgbWlzdGFrZSBvZiBub3QgaW5jbHVkaW5nIGEgYmFja3NsYXNoIHRvIGVzY2FwZSBcdTAwMjZxdW90Oy5cdTAwMjZxdW90O3NwZWNpYWwgY2hhcmFjdGVyLiBcdTAwMjZuYnNwO0kgYmVsaWV2ZSB0aGlzIG92ZXJzaWdodCB3b3VsZCBoYXZlIGludHJvZHVjZWQgc29tZSBlcnJvcnMgaW4gc29tZSB0YXhvbm9taWVzLiBJIHRoYW5rIFByb2YgTGVzbGV5IEhveWxlcyBmb3IgcmFpc2luZyBkaXNjcmVwYW5jaWVzXHUwMDI2bmJzcDt3aGljaCB0cmlnZ2VyZWQgZm9yIG1lIHRvIHJldmlldyB0aGUgYmFzaCBzY3JpcHQgaSB1c2VkIHRvIGVkaXQgdGhlIEdUREIgZmFzdGEgYW5ub3RhdGlvbnMuIEl0IGhhcyBub3cgYmVlbiByZWN0aWZpZWQgYW5kIHRodXMgZXZlcnl0aGluZyBzaG91bGQgYmUgYXMgaSBvcmlnaW5hbGx5IGV4cGxhaW5lZCBiZWxvdy4gXHUwMDNjL2VtXHUwMDNlXHUwMDNjL3N0cm9uZ1x1MDAzZVx1MDAzYy9wXHUwMDNlXG5cblx1MDAzY3BcdTAwM2VcdTAwM2NzdHJvbmdcdTAwM2VcdTAwM2NlbVx1MDAzZUlmIGFueW9uZSBoYXMgY29uY2VybnNcdTAwMjZuYnNwO3dpdGggTUFHIGV4dHJhY3RlZCAxNlMgclJOQSBnZW5lIGNvbnRhbWluYXRpb24gY29uY2VybnMsIHRoZW4gSSBzdWdnZXN0IHRoYXQgdGhleSBjb250YWN0IHRoZSBjdXJhdG9ycyBvZiBHVERCIHRoZW1zZWx2ZXMgYmVjYXVzZSBpdCBpcyBvdXRzaWRlIG9mIG15IHJvbGUgd2l0aCB0aGVzZSByZXNvdXJjZXMgZGVzaWduZWQgZm9yIERBREEyIHVzYWdlIG9ubHkuIEFub3RoZXIgY29uY2VybiB0aGF0IHdhcyByYWlzZWQgd2FzIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgREIgc2VxdWVuY2VzLCB0byBnZXQgcGFzdCB0aGlzIHByb2JsZW0gcGxlYXNlIHVzZSB0aGUgdHJ5UkMgPSBUUlVFIGFyZ3VtZW50IGluIHRoZSBhc3NpZ25UYXhvbm9teSBjb21tYW5kIHdpdGhpbiBEQURBMiwgdGhpcyB3aWxsIHNlYXJjaCB5b3VyIEFTVnMgaW4gdGhlIHJldmVyc2UgY29tcGxlbWVudCBhcyB3ZWxsLlx1MDAyNm5ic3A7XHUwMDI2bmJzcDtcdTAwM2MvZW1cdTAwM2VcdTAwM2Mvc3Ryb25nXHUwMDNlXHUwMDNjL3BcdTAwM2VcblxuXHUwMDNjcFx1MDAzZVx1MDAyNm5ic3A7XHUwMDNjL3BcdTAwM2VcblxuXHUwMDNjcFx1MDAzZVRoaXMgVmVyc2lvbiB3YXMgcHJpbWFyaWx5IHVwZGF0ZWQgYmVjYXVzZSB3ZSBoYXZlIHJlY2VudGx5IHVwZGF0ZWQgdGhlIFJlZlNlcStSRFAgZGF0YWJhc2UgYW5kIGFsc28gaW5jbHVkZWQgbWl0b2Nob25kcmlhbCBhbmQgZXVrYXJ5b3RpYyAxNlMgclJOQSBzZXF1ZW5jZXMuXHUwMDI2bmJzcDtBbHNvIGJlY2F1c2UgSVx1MDAyNm5ic3A7ZGVjaWRlZCB0byBpbmNsdWRlIHRoZSByZXF1aXJlZCBmb3JtYXRzIHRvIGJlIGFibGUgdG8gdXNlIHRoZSBhZGRTcGVjaWVzIGNvbW1hbmQgaW4gREFEQTIuIFRoaXMgY29tbWFuZCBzZWFyY2hlcyB0aGUgZGF0YWJhc2UgYXQgMTAwJSBpZGVudGl0eSBhbmQgaGFzIHRoZSBmbGV4aWJpbGl0eSB0byBlaXRoZXIgZ2V0IGJlc3QgaGl0IG9yIG11bHRpcGxlIGhpdHMgdG8geW91ciBhbXBsaWNvbi4gSSByZWNvbW1lbmQgaXQgaWYgeW91IGFyZSB1c2luZyBhIHNpbmdsZSBvciAyIHJlZ2lvbiBhbXBsaWNvbnMgb2YgdGhlIDE2UyByUk5BIGdlbmUuXHUwMDNjL3BcdTAwM2VcblxuXHUwMDNjcFx1MDAzZVRoZXNlIHR3byBjb21iaW5lZCBiYWN0ZXJpYWwgYW5kIGFyY2hhZWFsIDE2UyByUk5BIGdlbmUgc2VxdWVuY2UgZGF0YWJhc2VzIHdlcmUgY29sbGF0ZWQgZnJvbSB2YXJpb3VzIHNvdXJjZXMgYW5kIGZvcm1hdHRlZCBmb3IgdGhlIHB1cnBvc2Ugb2YgdXNpbmcgdGhlIFx1MDAyNnF1b3Q7YXNzaWduVGF4b25vbXlcdTAwMjZxdW90OyBjb21tYW5kIHdpdGhpbiB0aGUgREFEQTJcdTAwMjZuYnNwO3BpcGVsaW5lLlx1MDAyNm5ic3A7VGhlIGRhdGEgd2FzIGNvbnZlcnRlZCB0byBzdWl0ZSBEQURBMiBmb3JtYXQgYnkgQWxpc2h1bSBBbGkuXHUwMDNjL3BcdTAwM2VcblxuXHUwMDNjb2xcdTAwM2Vcblx0XHUwMDNjbGlcdTAwM2VSZWZTZXErUkRQOiBUaGlzIGRhdGFiYXNlIGNvbnRhaW5zIDIyNDMzXHUwMDI2bmJzcDtiYWN0ZXJpYWwsXHUwMDI2bmJzcDsxMDU1XHUwMDI2bmJzcDthcmNoYWVhIGFuZCA5OSBldWthcnlvdGljXHUwMDI2bmJzcDtmdWxsIGxlbmd0aHMxNlMgclJOQSBnZW5lIHNlcXVlbmNlcy5cdTAwMjZuYnNwOyBJdCB3YXMgY29tcGlsZWQgYnkgXHUwMDNjc3Ryb25nXHUwMDNlUGF1bCBHcmVlbmZpZWxkIFx1MDAzYy9zdHJvbmdcdTAwM2VvbiB0aGVcdTAwMjZuYnNwO1x1MDAzY3N0cm9uZ1x1MDAzZTA2LzExLzIwMjBcdTAwM2Mvc3Ryb25nXHUwMDNlXHUwMDI2bmJzcDtmcm9tIHByZWRvbWluYW50bHkgdGhlIE5DQkkgUmVmU2VxIDE2UyByUk5BIGRhdGFiYXNlIChodHRwczovL3d3dy5uY2JpLm5sbS5uaWguZ292L3JlZnNlcS90YXJnZXRlZGxvY2kvMTZTX3Byb2Nlc3MvKVx1MDAyNm5ic3A7YW5kIHdhcyBzdXBwbGVtZW50ZWQgd2l0aCBleHRyYVx1MDAyNm5ic3A7c2VxdWVuY2VzIGZyb20gdGhlXHUwMDI2bmJzcDtSRFAgZGF0YWJhc2UgKGh0dHBzOi8vcmRwLmNtZS5tc3UuZWR1L21pc2MvcmVzb3VyY2VzLmpzcCkuXHUwMDNjL2xpXHUwMDNlXG5cdFx1MDAzY2xpXHUwMDNlR2Vub21lIFRheG9ub215IERhdGFiYXNlIChHVERCKTogVGhlIG5ldyB2ZXJzaW9uIG9mIG91ciBkYWRhMiBmb3JtYXR0ZWQgR1REQiByZWZlcmVuY2Ugc2VxdWVuY2VzIG5vdyBjb250YWlucyAyMTk2NVx1MDAyNm5ic3A7YmFjdGVyaWEgYW5kIDExMjYgYXJjaGFlYSBmdWxsIDE2UyByUk5BIGdlbmUgc2VxdWVuY2VzLlx1MDAyNm5ic3A7SWYgeW91IHdvbmRlciB3aHkgdGhlcmUgYXJlIGZld2VyIHNwZWNpZXMgd2l0aCAxNlMgclJOQSwgdGhhdCBpcyBiZWNhdXNlIHNvbWUgbWV0YWdlbm9taWNzIGFzc2VtYmxlZCBnZW5vbWVzIChNQUdzKSBsYWNrXHUwMDI2bmJzcDt0aGUgMTZTIGdlbmUgYW5kIHRodXMgY2Fubm90IGJlIGV4dHJhY3RlZC5cdTAwMjZuYnNwOyBUaGUgZGF0YWJhc2Ugd2FzIGRvd25sb2FkZWQgZnJvbSBcdTAwM2NhIGhyZWY9XCJodHRwczovL2RhdGEuYWNlLnVxLmVkdS5hdS9wdWJsaWMvZ3RkYi9kYXRhL3JlbGVhc2VzL3JlbGVhc2U5NS9cIlx1MDAzZWh0dHBzOi8vZGF0YS5hY2UudXEuZWR1LmF1L3B1YmxpYy9ndGRiL2RhdGEvcmVsZWFzZXMvcmVsZWFzZTk1L1x1MDAzYy9hXHUwMDNlXHUwMDI2bmJzcDtvbiAxOS8wNy8yMDIwLlx1MDAyNm5ic3A7UGxlYXNlIHJlYWQgdGhlIHJlbGVhc2Ugbm90ZXMgYW5kIGZpbGUgZGVzY3JpcHRpb25zLlx1MDAyNm5ic3A7XHUwMDNjL2xpXHUwMDNlXG5cdTAwM2Mvb2xcdTAwM2VcblxuXHUwMDNjcFx1MDAzZVRoZSBmb3JtYXR0aW5nIHRvIERBREEyXHUwMDI2bmJzcDt3YXMgZG9uZSB1c2luZyBhIHNpbXBsZSBhd2sgYmFzaCBzY3JpcHRzLiBUaGUgc2NyaXB0XHUwMDI2bmJzcDt0YWtlc1x1MDAyNm5ic3A7YXMgaW5wdXQgYVx1MDAyNm5ic3A7ZmFzdGFcdTAwMjZuYnNwO2ZpbGUgYW5kIGEgdGFiLWRlbGltaXRlZCB0YXhvbm9teSBmaWxlXHUwMDI2bmJzcDsoc2xpZ2h0bHkgZWRpdGVkIHRvIHJlbW92ZSBzcGVjaWFsIGNoYXJhY3RlcnMpIGFuZCB0aGVuIGl0XHUwMDI2bmJzcDtvdXRwdXRzIGEgZmFzdGEgZmlsZSB3aXRoIGFsbCA3IHRheG9ub215IHJhbmtzIHNlcGFyYXRlZCBieSBcdTAwMjZxdW90OztcdTAwMjZxdW90OyBhcyByZXF1aXJlZCBmb3IgREFEQTIgY29tcGF0aWJpbGl0eS4gQWRkaXRpb25hbGx5LFx1MDAyNm5ic3A7d2UgaGF2ZSBjb25jYXRlbmF0ZWRcdTAwMjZuYnNwO3RoZSB1bmlxdWVcdTAwMjZuYnNwO3NlcXVlbmNlIElEIGJlIGl0IE5DQkkvUkRQIG9yIEdUREJcdTAwMjZuYnNwO0lEIHRvIHRoZSBzcGVjaWVzIGVudHJ5IChidXQgcmVwbGFjZWQgdGhlIFx1MDAyNnF1b3Q7Llx1MDAyNnF1b3Q7IHdpdGggYW4gXHUwMDI2cXVvdDsgX1x1MDAyNnF1b3Q7LiBXZSBzZWUgdGhpcyBhcyBhbiBpbXBvcnRhbnQgUUMgc3RlcCB0byBoaWdobGlnaHQgdGhlIGlzc3Vlcy9jb25maWRlbmNlIGFzc29jaWF0ZWQgd2l0aCBzaG9ydCByZWFkIHRheG9ub215IGFzc2lnbm1lbnQgYXQgdGhlIGZpbmVyIHJhbmsgbGV2ZWxzLlx1MDAzYy9wXHUwMDNlXG5cblx1MDAzY3BcdTAwM2VBbHNvLCB0aGlzIHVwZGF0ZSBpbmNsdWRlcyB0d28gb3RoZXIgZmlsZXMgdGhhdCB5b3UgY2FuIHVzZSB3aXRoIHRoZSBhc3NpZ25UYXhvbm9teSBhbmQgYWRkU3BlY2llcyBjb21tYW5kcyBpbiBEQURBMi5cdTAwM2MvcFx1MDAzZSJdfSx7InRpbWRleFJlY29yZElkIjoiemVub2RvOjQzNjE4OTIiLCJ0aXRsZSI6IkRBREEyIGZvcm1hdHRlZCAxNlMgclJOQSBnZW5lIHNlcXVlbmNlcyBmb3IgYm90aCBiYWN0ZXJpYSBcdTAwMjYgYXJjaGFlYSIsImNvbnRlbnRUeXBlIjpbIkRhdGFzZXQiXSwiY29udHJpYnV0b3JzIjpbeyJraW5kIjoiQ3JlYXRvciIsInZhbHVlIjoiQWxpIEFsaXNodW0ifSx7ImtpbmQiOiJDb250YWN0UGVyc29uIiwidmFsdWUiOiJBbGkgQWxpc2h1bSJ9LHsia2luZCI6Ik90aGVyIiwidmFsdWUiOiJTZWVyc2hvbG0gRnJlZGVyaWsifSx7ImtpbmQiOiJEYXRhQ3VyYXRvciIsInZhbHVlIjoiR3JlZW5maWVsZCBQYXVsIn0seyJraW5kIjoiUmVzZWFyY2hlciIsInZhbHVlIjoiQ2hyaXN0b3BoZXJzZW4gQ2xhdXMifV0sInB1YmxpY2F0aW9uSW5mb3JtYXRpb24iOlsiWmVub2RvIl0sImRhdGVzIjpbeyJraW5kIjoiUHVibGljYXRpb24gZGF0ZSIsInZhbHVlIjoiMjAyMCJ9LHsia2luZCI6Iklzc3VlZCIsInZhbHVlIjoiMjAyMC0xMi0xOSJ9XSwibGlua3MiOlt7ImtpbmQiOiJEaWdpdGFsIG9iamVjdCBVUkwiLCJyZXN0cmljdGlvbnMiOm51bGwsInRleHQiOiJEaWdpdGFsIG9iamVjdCBVUkwiLCJ1cmwiOiJodHRwczovL3plbm9kby5vcmcvcmVjb3JkLzQzNjE4OTIifV0sIm5vdGVzIjpbeyJraW5kIjoiT3RoZXIiLCJ2YWx1ZSI6WyJCYXNoIHNjcmlwdCBjYW4gYmUgcHJvdmlkZWQgb24gcmVxdWVzdC4iXX0seyJraW5kIjoiT3RoZXIiLCJ2YWx1ZSI6WyJ7XCJyZWZlcmVuY2VzXCI6IFtcIlBhcmtzLCBELiBILiwgZXQgYWwuICgyMDE4KS4gXFxcIkEgc3RhbmRhcmRpemVkIGJhY3RlcmlhbCB0YXhvbm9teSBiYXNlZCBvbiBnZW5vbWUgcGh5bG9nZW55IHN1YnN0YW50aWFsbHkgcmV2aXNlcyB0aGUgdHJlZSBvZiBsaWZlLlxcXCIgTmF0dXJlIEJpb3RlY2hub2xvZ3kuXCIsIFwiQ29sZSwgSi4gUi4sIFEuIFdhbmcsIEouIEEuIEZpc2gsIEIuIENoYWksIEQuIE0uIE1jR2FycmVsbCwgWS4gU3VuLCBDLiBULiBCcm93biwgQS4gUG9ycmFzLUFsZmFybywgQy4gUi4gS3Vza2UsIGFuZCBKLiBNLiBUaWVkamUuIDIwMTQuIFJpYm9zb21hbCBEYXRhYmFzZSBQcm9qZWN0OiBkYXRhIGFuZCB0b29scyBmb3IgaGlnaCB0aHJvdWdocHV0IHJSTkEgYW5hbHlzaXMgTnVjbC4gQWNpZHMgUmVzLiA0MihEYXRhYmFzZSBpc3N1ZSk6RDYzMy1ENjQyOyBkb2k6IDEwLjEwOTMvbmFyL2drdDEyNDQgW1BNSUQ6IDI0Mjg4MzY4XVwiLCBcIk5DQkkgMTZTIFJlZlNlcSBOdWNsZW90aWRlIHNlcXVlbmNlIHJlY29yZHM6IGh0dHBzOi8vd3d3Lm5jYmkubmxtLm5paC5nb3YvbnVjY29yZT90ZXJtPTMzMTc1JTVCQmlvUHJvamVjdCU1RCtPUiszMzMxNyU1QkJpb1Byb2plY3QlNURcIl19Il19XSwiaGlnaGxpZ2h0IjpbeyJtYXRjaGVkRmllbGQiOiJub3Rlcy52YWx1ZSIsIm1hdGNoZWRQaHJhc2VzIjpbIkFjaWRzIFJlcy4gNDIoRGF0YWJhc2UgaXNzdWUpOkQ2MzMtRDY0MjsgZG9pOiAxMC4xMDkzL25hci9na3QxMjQ0IFtcdTAwM2NzcGFuIGNsYXNzPVwiaGlnaGxpZ2h0XCJcdTAwM2VQTUlEXHUwMDNjL3NwYW5cdTAwM2U6IDI0Mjg4MzY4XVwiLCBcIk5DQkkgMTZTIFJlZlNlcSJdfV0sInByb3ZpZGVyIjpudWxsLCJyaWdodHMiOlt7ImtpbmQiOm51bGwsImRlc2NyaXB0aW9uIjoiQ3JlYXRpdmUgQ29tbW9ucyBBdHRyaWJ1dGlvbiA0LjAgSW50ZXJuYXRpb25hbCIsInVyaSI6Imh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS80LjAvbGVnYWxjb2RlIn0seyJraW5kIjpudWxsLCJkZXNjcmlwdGlvbiI6Ik9wZW4gQWNjZXNzIiwidXJpIjoiaW5mbzpldS1yZXBvL3NlbWFudGljcy9vcGVuQWNjZXNzIn1dLCJzb3VyY2VMaW5rIjoiaHR0cHM6Ly96ZW5vZG8ub3JnL3JlY29yZC80MzYxODkyIiwic3VtbWFyeSI6WyJcdTAwM2NwXHUwMDNlVGhpcyBWZXJzaW9uIHdhcyBwcmltYXJpbHkgdXBkYXRlZCBiZWNhdXNlIHdlIGhhdmUgcmVjZW50bHkgdXBkYXRlZCB0aGUgUmVmU2VxK1JEUCBkYXRhYmFzZSBhbmQgYWxzbyBpbmNsdWRlZCBtaXRvY2hvbmRyaWFsIGFuZCBldWthcnlvdGljIDE2UyByUk5BIHNlcXVlbmNlcy5cdTAwMjZuYnNwO0Fsc28gYmVjYXVzZSBJXHUwMDI2bmJzcDtkZWNpZGVkIHRvIGluY2x1ZGUgdGhlIHJlcXVpcmVkIGZvcm1hdHMgdG8gYmUgYWJsZSB0byB1c2UgdGhlIGFkZFNwZWNpZXMgY29tbWFuZCBpbiBEQURBMi4gVGhpcyBjb21tYW5kIHNlYXJjaGVzIHRoZSBkYXRhYmFzZSBhdCAxMDAlIGlkZW50aXR5IGFuZCBoYXMgdGhlIGZsZXhpYmlsaXR5IHRvIGVpdGhlciBnZXQgYmVzdCBoaXQgb3IgbXVsdGlwbGUgaGl0cyB0byB5b3VyIGFtcGxpY29uLiBJIHJlY29tbWVuZCBpdCBpZiB5b3UgYXJlIHVzaW5nIGEgc2luZ2xlIG9yIDIgcmVnaW9uIGFtcGxpY29ucyBvZiB0aGUgMTZTIHJSTkEgZ2VuZS5cdTAwM2MvcFx1MDAzZVxuXG5cdTAwM2NwXHUwMDNlVGhlc2UgdHdvIGNvbWJpbmVkIGJhY3RlcmlhbCBhbmQgYXJjaGFlYWwgMTZTIHJSTkEgZ2VuZSBzZXF1ZW5jZSBkYXRhYmFzZXMgd2VyZSBjb2xsYXRlZCBmcm9tIHZhcmlvdXMgc291cmNlcyBhbmQgZm9ybWF0dGVkIGZvciB0aGUgcHVycG9zZSBvZiB1c2luZyB0aGUgXHUwMDI2cXVvdDthc3NpZ25UYXhvbm9teVx1MDAyNnF1b3Q7IGNvbW1hbmQgd2l0aGluIHRoZSBEQURBMlx1MDAyNm5ic3A7cGlwZWxpbmUuXHUwMDI2bmJzcDtUaGUgZGF0YSB3YXMgY29udmVydGVkIHRvIHN1aXRlIERBREEyIGZvcm1hdCBieSBBbGlzaHVtIEFsaS5cdTAwM2MvcFx1MDAzZVxuXG5cdTAwM2NvbFx1MDAzZVxuXHRcdTAwM2NsaVx1MDAzZVJlZlNlcStSRFA6IFRoaXMgZGF0YWJhc2UgY29udGFpbnMgMjI0MzNcdTAwMjZuYnNwO2JhY3RlcmlhbCxcdTAwMjZuYnNwOzEwNTVcdTAwMjZuYnNwO2FyY2hhZWEgYW5kIDk5IGV1a2FyeW90aWNcdTAwMjZuYnNwO2Z1bGwgbGVuZ3RoczE2UyByUk5BIGdlbmUgc2VxdWVuY2VzLlx1MDAyNm5ic3A7IEl0IHdhcyBjb21waWxlZCBieSBcdTAwM2NzdHJvbmdcdTAwM2VQYXVsIEdyZWVuZmllbGQgXHUwMDNjL3N0cm9uZ1x1MDAzZW9uIHRoZVx1MDAyNm5ic3A7XHUwMDNjc3Ryb25nXHUwMDNlMDYvMTEvMjAyMFx1MDAzYy9zdHJvbmdcdTAwM2VcdTAwMjZuYnNwO2Zyb20gcHJlZG9taW5hbnRseSB0aGUgTkNCSSBSZWZTZXEgMTZTIHJSTkEgZGF0YWJhc2UgKGh0dHBzOi8vd3d3Lm5jYmkubmxtLm5paC5nb3YvcmVmc2VxL3RhcmdldGVkbG9jaS8xNlNfcHJvY2Vzcy8pXHUwMDI2bmJzcDthbmQgd2FzIHN1cHBsZW1lbnRlZCB3aXRoIGV4dHJhXHUwMDI2bmJzcDtzZXF1ZW5jZXMgZnJvbSB0aGVcdTAwMjZuYnNwO1JEUCBkYXRhYmFzZSAoaHR0cHM6Ly9yZHAuY21lLm1zdS5lZHUvbWlzYy9yZXNvdXJjZXMuanNwKS5cdTAwM2MvbGlcdTAwM2Vcblx0XHUwMDNjbGlcdTAwM2VHZW5vbWUgVGF4b25vbXkgRGF0YWJhc2UgKEdUREIpOiBUaGUgbmV3IHZlcnNpb24gb2Ygb3VyIGRhZGEyIGZvcm1hdHRlZCBHVERCIHJlZmVyZW5jZSBzZXF1ZW5jZXMgbm93IGNvbnRhaW5zIDIxOTY1XHUwMDI2bmJzcDtiYWN0ZXJpYSBhbmQgMTEyNiBhcmNoYWVhIGZ1bGwgMTZTIHJSTkEgZ2VuZSBzZXF1ZW5jZXMuXHUwMDI2bmJzcDtJZiB5b3Ugd29uZGVyIHdoeSB0aGVyZSBhcmUgZmV3ZXIgc3BlY2llcyB3aXRoIDE2UyByUk5BLCB0aGF0IGlzIGJlY2F1c2Ugc29tZSBtZXRhZ2Vub21pY3MgYXNzZW1ibGVkIGdlbm9tZXMgKE1BR3MpIGxhY2tcdTAwMjZuYnNwO3RoZSAxNlMgZ2VuZSBhbmQgdGh1cyBjYW5ub3QgYmUgZXh0cmFjdGVkLlx1MDAyNm5ic3A7IFRoZSBkYXRhYmFzZSB3YXMgZG93bmxvYWRlZCBmcm9tIFx1MDAzY2EgaHJlZj1cImh0dHBzOi8vZGF0YS5hY2UudXEuZWR1LmF1L3B1YmxpYy9ndGRiL2RhdGEvcmVsZWFzZXMvcmVsZWFzZTk1L1wiXHUwMDNlaHR0cHM6Ly9kYXRhLmFjZS51cS5lZHUuYXUvcHVibGljL2d0ZGIvZGF0YS9yZWxlYXNlcy9yZWxlYXNlOTUvXHUwMDNjL2FcdTAwM2VcdTAwMjZuYnNwO29uIDE5LzA3LzIwMjAuXHUwMDI2bmJzcDtQbGVhc2UgcmVhZCB0aGUgcmVsZWFzZSBub3RlcyBhbmQgZmlsZSBkZXNjcmlwdGlvbnMuXHUwMDI2bmJzcDtcdTAwM2MvbGlcdTAwM2Vcblx1MDAzYy9vbFx1MDAzZVxuXG5cdTAwM2NwXHUwMDNlVGhlIGZvcm1hdHRpbmcgdG8gREFEQTJcdTAwMjZuYnNwO3dhcyBkb25lIHVzaW5nIGEgc2ltcGxlIGF3ayBiYXNoIHNjcmlwdHMuIFRoZSBzY3JpcHRcdTAwMjZuYnNwO3Rha2VzXHUwMDI2bmJzcDthcyBpbnB1dCBhXHUwMDI2bmJzcDtmYXN0YVx1MDAyNm5ic3A7ZmlsZSBhbmQgYSB0YWItZGVsaW1pdGVkIHRheG9ub215IGZpbGVcdTAwMjZuYnNwOyhzbGlnaHRseSBlZGl0ZWQgdG8gcmVtb3ZlIHNwZWNpYWwgY2hhcmFjdGVycykgYW5kIHRoZW4gaXRcdTAwMjZuYnNwO291dHB1dHMgYSBmYXN0YSBmaWxlIHdpdGggYWxsIDcgdGF4b25vbXkgcmFua3Mgc2VwYXJhdGVkIGJ5IFx1MDAyNnF1b3Q7O1x1MDAyNnF1b3Q7IGFzIHJlcXVpcmVkIGZvciBEQURBMiBjb21wYXRpYmlsaXR5LiBBZGRpdGlvbmFsbHksXHUwMDI2bmJzcDt3ZSBoYXZlIGNvbmNhdGVuYXRlZFx1MDAyNm5ic3A7dGhlIHVuaXF1ZVx1MDAyNm5ic3A7c2VxdWVuY2UgSUQgYmUgaXQgTkNCSS9SRFAgb3IgR1REQlx1MDAyNm5ic3A7SUQgdG8gdGhlIHNwZWNpZXMgZW50cnkgKGJ1dCByZXBsYWNlZCB0aGUgXHUwMDI2cXVvdDsuXHUwMDI2cXVvdDsgd2l0aCBhbiBcdTAwMjZxdW90OyBfXHUwMDI2cXVvdDsuIFdlIHNlZSB0aGlzIGFzIGFuIGltcG9ydGFudCBRQyBzdGVwIHRvIGhpZ2hsaWdodCB0aGUgaXNzdWVzL2NvbmZpZGVuY2UgYXNzb2NpYXRlZCB3aXRoIHNob3J0IHJlYWQgdGF4b25vbXkgYXNzaWdubWVudCBhdCB0aGUgZmluZXIgcmFuayBsZXZlbHMuXHUwMDNjL3BcdTAwM2VcblxuXHUwMDNjcFx1MDAzZUFsc28sIHRoaXMgdXBkYXRlIGluY2x1ZGVzIHR3byBvdGhlciBmaWxlcyB0aGF0IHlvdSBjYW4gdXNlIHdpdGggdGhlIGFzc2lnblRheG9ub215IGFuZCBhZGRTcGVjaWVzIGNvbW1hbmRzIGluIERBREEyLlx1MDAzYy9wXHUwMDNlIl19LHsidGltZGV4UmVjb3JkSWQiOiJ6ZW5vZG86MTMzMjMiLCJ0aXRsZSI6IkEgZGF0YXNldCB1c2VkIHRvIGRldGVybWluZSBhIHNlbWFudGljIHNpbWlsYXJpdHkgbWV0cmljIGJhc2VkIG9uIFVNTFMgZm9yIFBNQy1PQSIsImNvbnRlbnRUeXBlIjpbIkRhdGFzZXQiXSwiY29udHJpYnV0b3JzIjpbeyJraW5kIjoiQ3JlYXRvciIsInZhbHVlIjoiR2FyY2lhIENhc3RybywgTGV5bGEgSmFlbCJ9LHsia2luZCI6IkNyZWF0b3IiLCJ2YWx1ZSI6IkJlcmxhbmdhLCBSYWZhZWwifSx7ImtpbmQiOiJDcmVhdG9yIiwidmFsdWUiOiJHYXJjaWEsIEFsZXhhbmRlciJ9XSwicHVibGljYXRpb25JbmZvcm1hdGlvbiI6WyJaZW5vZG8iXSwiZGF0ZXMiOlt7ImtpbmQiOiJQdWJsaWNhdGlvbiBkYXRlIiwidmFsdWUiOiIyMDE0In0seyJraW5kIjoiSXNzdWVkIiwidmFsdWUiOiIyMDE0LTEyLTE5In1dLCJsaW5rcyI6W3sia2luZCI6IkRpZ2l0YWwgb2JqZWN0IFVSTCIsInJlc3RyaWN0aW9ucyI6bnVsbCwidGV4dCI6IkRpZ2l0YWwgb2JqZWN0IFVSTCIsInVybCI6Imh0dHBzOi8vemVub2RvLm9yZy9yZWNvcmQvMTMzMjMifV0sIm5vdGVzIjpudWxsLCJoaWdobGlnaHQiOlt7Im1hdGNoZWRGaWVsZCI6InN1bW1hcnkiLCJtYXRjaGVkUGhyYXNlcyI6WyJUaGUgZmlyc3QgdHdvIGNvbHVtbnMgY29ycmVzcG9uZCB0byBQdWJNZWQgSWRlbnRpZmllciAoXHUwMDNjc3BhbiBjbGFzcz1cImhpZ2hsaWdodFwiXHUwMDNlUE1JRFx1MDAzYy9zcGFuXHUwMDNlKSBhbmQgUHViTWVkIENlbnRyYWwgaWRlbnRpZmllciAoUE1DKS4iXX1dLCJwcm92aWRlciI6bnVsbCwicmlnaHRzIjpbeyJraW5kIjpudWxsLCJkZXNjcmlwdGlvbiI6IkFwYWNoZSBMaWNlbnNlIDIuMCIsInVyaSI6Imh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQXBhY2hlLTIuMCJ9LHsia2luZCI6bnVsbCwiZGVzY3JpcHRpb24iOiJPcGVuIEFjY2VzcyIsInVyaSI6ImluZm86ZXUtcmVwby9zZW1hbnRpY3Mvb3BlbkFjY2VzcyJ9XSwic291cmNlTGluayI6Imh0dHBzOi8vemVub2RvLm9yZy9yZWNvcmQvMTMzMjMiLCJzdW1tYXJ5IjpbIlx1MDAzY3BcdTAwM2VXZSBoYXZlIHBlcmZvcm1lZCBhIHNlcmllcyBvZiBpbi1zaWxpY28gZXhwZXJpbWVudHMgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIGEgc2VtYW50aWMgc2ltaWxhcml0eSBtZXRyaWMgYmFzZWQgb24gVU1MUyBhbm5vdGF0aW9ucyBmb3IgUHViTWVkIENlbnRyYWwgT3BlbiBBY2Nlc3MuIEhlcmUgd2UgaGF2ZSBzdG9yZWQgdGhlIGRhdGEgdXNlZCBmb3IgYW5kIG9idGFpbmVkIGZyb20gc3VjaCBleHBlcmltZW50cy4gV2UgaGF2ZSB3b3JrZWQgd2l0aCByZWxldmFudCBhbmQgcGFydGlhbGx5IHJlbGV2YW50IGFydGljbGVzIGZyb20gdGhlIFRSRUMtMjAwNSBHZW5vbWljcyBUcmFjayBDb2xsZWN0aW9uLCBmcm9tIG5vdyByZWZlcnJlZCBhcyB0aGUgaW5pdGlhbCBjb2xsZWN0aW9uLCBpbmNsdWRpbmcgYSB0b3RhbCBvZiA0MjQwIHVuaXF1ZSBQdWJNZWQgYXJ0aWNsZXMuIEZyb20gdGhvc2UgNDI0MCBhcnRpY2xlcywgb25seSA2MiBoYWQgcHVibGljbHkgYXZhaWxhYmxlOyB0aG9zZSA2MiBhcnRpY2xlcyBjb3JyZXNwb25kIHRvIHRoZSBmdWxsLXRleHQgY29sbGVjdGlvbi5cdTAwM2MvcFx1MDAzZVxuXG5cdTAwM2NwXHUwMDNlT3VyIGRhdGEgY29tcHJpc2VzIGZsYXQgZmlsZXMgdXNpbmcgdGFicyBhcyBzZXBhcmF0b3JzIGFuZCBvbmUgRXhjZWwgc2hlZXQuIFRhYiBzZXBhcmF0ZWQgdmFsdWVzIGFsd2F5cyBpbmNsdWRlIGEgZmlyc3Qgcm93IHdpdGggaGVhZGluZ3M6XHUwMDNjL3BcdTAwM2VcblxuXHUwMDNjdWxcdTAwM2Vcblx0XHUwMDNjbGlcdTAwM2VTdGVtcyBleHRyYWN0ZWQgZnJvbSB0aXRsZSBhbmQgYWJzdHJhY3QgZm9yIGFydGljbGVzIGluIHRoZSBpbml0aWFsIGNvbGxlY3Rpb24uIEVhY2ggcm93IGNvbnRhaW5zIGEgc3RlbSB3aXRoIGl0cyBpbnZlcnNlLWRvY3VtZW50LWZyZXF1ZW5jeSAoSURGKSB3aXRoaW4gdGhlIGluaXRpYWwgY29sbGVjdGlvbi4gU3RlbXMgd2VyZSBjYWxjdWxhdGVkIGZvbGxvd2luZyB0aGUgUG9ydGVyIGFsZ29yaXRobSAoYXZhaWxhYmxlIGF0IGh0dHA6Ly90YXJ0YXJ1cy5vcmcvbWFydGluL1BvcnRlclN0ZW1tZXIvamF2YS50eHQpXG5cdFx1MDAzY3VsXHUwMDNlXG5cdFx0XHUwMDNjbGlcdTAwM2VzdGVtcy5UQS50c3ZcdTAwM2MvbGlcdTAwM2Vcblx0XHUwMDNjL3VsXHUwMDNlXG5cdFx1MDAzYy9saVx1MDAzZVxuXHRcdTAwM2NsaVx1MDAzZUFydGljbGUgcHJvZmlsZXMsIGkuZS4sIHRlcm1zIChlaXRoZXIgd29yZCBzdGVtcyBvciBVTUxTIGNvbmNlcHRzKSBmb3VuZCBpbiB0aGUgYXJ0aWNsZXNcdTAwMjZuYnNwO3dpdGggdGVybSBmcmVxdWVuY3kgKFRGKSBhbmQgSURGLiBUaGUgZmlyc3QgdHdvIGNvbHVtbnMgY29ycmVzcG9uZCB0byBQdWJNZWQgSWRlbnRpZmllciAoUE1JRCkgYW5kIFB1Yk1lZCBDZW50cmFsIGlkZW50aWZpZXIgKFBNQykuIFBNQyBpZGVudGlmaWVyIHdhcyBzZXQgdG8gMCB3aGVuZXZlciBmdWxsLXRleHQgd2FzIG5vdCBhdmFpbGFibGUuXG5cdFx1MDAzY3VsXHUwMDNlXG5cdFx0XHUwMDNjbGlcdTAwM2Vwcm9maWxlcy5UQS50c3Y6IFByb2ZpbGVzIGFjY29yZGluZyB3b3JkIHN0ZW1zIGluIHRpdGxlIGFuZCBhYnN0cmFjdCBmb3IgdGhlIGluaXRpYWwgY29sbGVjdGlvblx1MDAzYy9saVx1MDAzZVxuXHRcdFx1MDAzY2xpXHUwMDNlcHJvZmlsZXMuUE1JRC50c3Y6IFByb2ZpbGVzIGFjY29yZGluZyB0byBVTUxTIGNvbmNwZXRzIGluIHRpdGxlIGFuZCBhYnN0cmFjdCBmb3IgdGhlIGluaXRpYWwgY29sbGVjdGlvblx1MDAzYy9saVx1MDAzZVxuXHRcdFx1MDAzY2xpXHUwMDNlcHJvZmlsZXMuUE1DX1RBLnRzdjogUHJvZmlsZXMgYWNjb3JkaW5nIHRvIFVNTFMgY29uY2VwdHMgaW4gdGl0bGUgYW5kIGFic3RyYWN0IGZvciB0aGUgZnVsbC10ZXh0IGNvbGxlY3Rpb25cdTAwM2MvbGlcdTAwM2Vcblx0XHRcdTAwM2NsaVx1MDAzZXByb2ZpbGVzLlBNQy50c3Y6IFByb2ZpbGVzIGFjY29yZGluZyB0byBVTUxTIGNvbmNlcHRzIGluIHRoZSBmdWxsLXRleHQgZm9yIHRoZSBmdWxsLXRleHQgY29sbGVjdGlvblx1MDAzYy9saVx1MDAzZVxuXHRcdTAwM2MvdWxcdTAwM2Vcblx0XHUwMDNjL2xpXHUwMDNlXG5cdFx1MDAzY2xpXHUwMDNlU2ltaWxhcml0eSBtYXRyaXhlcyBjYWxjdWxhdGVkIG9uIHRoZSBhcnRpY2xlIHByb2ZpbGVzIHdpdGggUHViTWVkIFJlbGF0ZWQgQXJ0aWNsZSBtZXRyaWMgKFBNUkEpLCBCTTI1LCBhbmQgQ29zaW5lLiBUaGVyZSBhcmUgbWF0cml4ZXMgZm9yIHRlcm1zIGZvdW5kIGluIHRpdGxlLWFuZC1hYnN0cmFjdCBhcyB3ZWxsIGFzIGZ1bGwtdGV4dC4gSW4gYSBzaW1pbGFyaXR5IG1hdHJpeCwgYSByZWZlcmVuY2UgYXJ0aWNsZSAoYW4gaW50ZXJlc3RcdTAwMjZuYnNwO2hhcyBiZWVuIGFscmVhZHkgZXhwcmVzc2VkIGZvciBpdCkgY29ycmVzcG9uZCB0byBhIHJvdywgd2hpbGUgdGhlIGNvbHVtbnMgY29ycmVzcG9uZCB0byBhbGwgdGhlIG90aGVyIGFydGljbGVzIGZvciB3aGljaCB0aGUgc2ltaWxhcml0eSB3YXMgY2FsY3VsYXRlZC5cblx0XHUwMDNjdWxcdTAwM2Vcblx0XHRcdTAwM2NsaVx1MDAzZU1hdHJpeGVzIGZvciBvdXIgaW5pdGlhbCBjb2xsZWN0aW9uXG5cdFx0XHUwMDNjdWxcdTAwM2Vcblx0XHRcdFx1MDAzY2xpXHUwMDNlc2ltaWxhcml0eS5QTVJBLlRBLnByb2ZpbGVzLlRBLnRzdjogU2ltaWxhcml0eSBtYXRyaXggZm9yIHByb2ZpbGVzLlRBLnRzdiBmb2xsb3dpbmcgdGhlIGFsZ29yaXRobSBQTVJBLiBUaGlzIG1hdHJpeCBpcyBjb25zaWRlcmVkIHRoZSBiYXNlbGluZSBmb3IgZnVydGhlciBhbmFseXNlc1x1MDAzYy9saVx1MDAzZVxuXHRcdFx0XHUwMDNjbGlcdTAwM2VzaW1pbGFyaXR5LlBNUkEucHJvZmlsZXMuUE1JRC50c3Y6IFNpbWlsYXJpdHkgbWF0cml4IGZvclx1MDAyNm5ic3A7cHJvZmlsZXMuUE1JRC50c3YgZm9sbG93aW5nIHRoZSBhbGdvcml0aG0gUE1SQVx1MDAzYy9saVx1MDAzZVxuXHRcdFx0XHUwMDNjbGlcdTAwM2VzaW1pbGFyaXR5LkJNMjVfMS4yXzAuNzUucHJvZmlsZXMuUE1JRC50c3Y6XHUwMDI2bmJzcDtTaW1pbGFyaXR5IG1hdHJpeCBmb3JcdTAwMjZuYnNwO3Byb2ZpbGVzLlBNSUQudHN2IGZvbGxvd2luZyB0aGUgYWxnb3JpdGhtIEJNMjUgd2l0aCBrPTEuMiBhbmQgYj0wLjc1XHUwMDNjL2xpXHUwMDNlXG5cdFx0XHRcdTAwM2NsaVx1MDAzZXNpbWlsYXJpdHkuQ09TSU5FLnByb2ZpbGVzLlBNSUQudHN2Olx1MDAyNm5ic3A7U2ltaWxhcml0eSBtYXRyaXggZm9yXHUwMDI2bmJzcDtwcm9maWxlcy5QTUlELnRzdiBmb2xsb3dpbmcgdGhlIGFsZ29yaXRobSBDb3NpbmVcdTAwM2MvbGlcdTAwM2Vcblx0XHRcdTAwM2MvdWxcdTAwM2Vcblx0XHRcdTAwM2MvbGlcdTAwM2Vcblx0XHRcdTAwM2NsaVx1MDAzZU1hdHJpeGVzIGZvciBvdXIgZnVsbC10ZXh0IGNvbGxlY3Rpb25cblx0XHRcdTAwM2N1bFx1MDAzZVxuXHRcdFx0XHUwMDNjbGlcdTAwM2VzaW1pbGFyaXR5LlBNUkEucHJvZmlsZXMuUE1DX1RBLnRzdjogU2ltaWxhcml0eSBtYXRyaXggZm9yIHByb2ZpbGVzLlBNQ19UQS50c3YgZm9sbG93aW5nIHRoZSBhbGdvcml0aG0gUE1SQVx1MDAzYy9saVx1MDAzZVxuXHRcdFx0XHUwMDNjbGlcdTAwM2VzaW1pbGFyaXR5LlBNUkEucHJvZmlsZXMuUE1DLnRzdjpcdTAwMjZuYnNwO1NpbWlsYXJpdHkgbWF0cml4IGZvciBwcm9maWxlcy5QTUMudHN2IGZvbGxvd2luZyB0aGUgYWxnb3JpdGhtIFBNUkFcdTAwM2MvbGlcdTAwM2Vcblx0XHRcdFx1MDAzY2xpXHUwMDNlc2ltaWxhcml0eS5CTTI1LnByb2ZpbGVzLlBNQ19UQS50c3Y6IFNpbWlsYXJpdHkgbWF0cml4IGZvciBwcm9maWxlcy5QTUNfVEEudHN2IGZvbGxvd2luZyB0aGUgYWxnb3JpdGhtIEJNMjUgd2l0aCBrPTEuMlx1MDAyNm5ic3A7YW5kIGI9MC43NVx1MDAzYy9saVx1MDAzZVxuXHRcdFx0XHUwMDNjbGlcdTAwM2VzaW1pbGFyaXR5LkJNMjUucHJvZmlsZXMuUE1DLnRzdjpcdTAwMjZuYnNwO1NpbWlsYXJpdHkgbWF0cml4IGZvciBwcm9maWxlcy5QTUMudHN2IGZvbGxvd2luZyB0aGUgYWxnb3JpdGhtIEJNMjUgd2l0aCBrPSAxLjIgYW5kIGI9IDAuNzVcdTAwM2MvbGlcdTAwM2Vcblx0XHRcdFx1MDAzY2xpXHUwMDNlc2ltaWxhcml0eS5DT1NJTkUucHJvZmlsZXMuUE1DX1RBLnRzdjogU2ltaWxhcml0eSBtYXRyaXggZm9yIHByb2ZpbGVzLlBNQ19UQS50c3YgZm9sbG93aW5nIHRoZSBhbGdvcml0aG0gQ29zaW5lXHUwMDNjL2xpXHUwMDNlXG5cdFx0XHRcdTAwM2NsaVx1MDAzZXNpbWlsYXJpdHkuQ09TSU5FLnByb2ZpbGVzLlBNQy50c3Y6XHUwMDI2bmJzcDtTaW1pbGFyaXR5IG1hdHJpeCBmb3IgcHJvZmlsZXMuUE1DLnRzdiBmb2xsb3dpbmcgdGhlIGFsZ29yaXRobSBDb3NpbmVcdTAwM2MvbGlcdTAwM2Vcblx0XHRcdTAwM2MvdWxcdTAwM2Vcblx0XHRcdTAwM2MvbGlcdTAwM2Vcblx0XHUwMDNjL3VsXHUwMDNlXG5cdFx1MDAzYy9saVx1MDAzZVxuXHRcdTAwM2NsaVx1MDAzZUNvcnJlbGF0aW9uIG1hdHJpeGVzIGZvciBzaW1pbGFyaXRpZXMgY2FsY3VsYXRlZCBmb3IgdGl0bGUtYW5kLWFic3RyYWN0IHRha2luZyBhcyByZWZlcmVuY2UgdGhlIHNpbWlsYXJpdHkgdmFsdWVzIG9idGFpbmVkIHdpdGggUE1SQSBmb3Igd29yZCBzdGVtcyBvbiB0aXRsZS1hbmQtYWJzdHJhY3QuXG5cdFx1MDAzY3VsXHUwMDNlXG5cdFx0XHUwMDNjbGlcdTAwM2VwZWFyc29uQ29ycmVsYXRpb24uUE1SQS50c3Y6IENvcnJlbGF0aW9uIGZvciBzaW1pbGFyaXR5LlBNUkEucHJvZmlsZXMuUE1JRC50c3ZcdTAwM2MvbGlcdTAwM2Vcblx0XHRcdTAwM2NsaVx1MDAzZXBlYXJzb25Db3JyZWxhdGlvblRvcGljLlBNUkEudHN2OiBDb3JyZWxhdGlvbiBmb3Igc2ltaWxhcml0eS5QTVJBLnByb2ZpbGVzLlBNSUQudHN2IGRpc2NyaW1pbmF0ZWQgYnkgVFJFQyB0b3BpY3NcdTAwM2MvbGlcdTAwM2Vcblx0XHRcdTAwM2NsaVx1MDAzZXBlYXJzb25Db3JyZWxhdGlvbi5CTTI1XzEuMl8wLjc1LnRzdjogQ29ycmVsYXRpb24gZm9yIHNpbWlsYXJpdHkuQk0yNV8xLjJfMC43NS5wcm9maWxlcy5QTUlELnRzdlx1MDAzYy9saVx1MDAzZVxuXHRcdFx1MDAzY2xpXHUwMDNlcGVhcnNvbkNvcnJlbGF0aW9uVG9waWMuQk0yNV8xLjJfMC43NS50c3Y6IENvcnJlbGF0aW9uIGZvciBzaW1pbGFyaXR5LkJNMjVfMS4yXzAuNzUucHJvZmlsZXMuUE1JRC50c3YgZGlzY3JpbWluYXRlZCBieSBUUkVDIHRvcGljc1x1MDAzYy9saVx1MDAzZVxuXHRcdFx1MDAzY2xpXHUwMDNlcGVhcnNvbkNvcnJlbGF0aW9uLkNPU0lORS50c3Y6IENvcnJlbGF0aW9uIGZvciBzaW1pbGFyaXR5LkNPU0lORS5wcm9maWxlcy5QTUlELnRzdlx1MDAzYy9saVx1MDAzZVxuXHRcdFx1MDAzY2xpXHUwMDNlcGVhcnNvbkNvcnJlbGF0aW9uVG9waWMuQ09TSU5FLnRzdjogQ29ycmVsYXRpb24gZm9yIHNpbWlsYXJpdHkuQ09TSU5FLnByb2ZpbGVzLlBNSUQudHN2IGRpc2NyaW1pbmF0ZWQgYnkgVFJFQyB0b3BpY3NcdTAwM2MvbGlcdTAwM2Vcblx0XHUwMDNjL3VsXHUwMDNlXG5cdFx1MDAzYy9saVx1MDAzZVxuXHRcdTAwM2NsaVx1MDAzZVByZWNpc2lvbiBhbmQgcmVjYWxsIHN1bW1hcmllcyBmb3IgdGhlIHNpbWlsYXJpdGllcyBjYWxjdWxhdGVkIGJhc2VkIG9uIHRpdGxlLWFuZC1hYnN0cmFjdC5cblx0XHUwMDNjdWxcdTAwM2Vcblx0XHRcdTAwM2NsaVx1MDAzZVN0YXRzQWxsU3VtbWFyeS54bHN4OiBQcmVjaXNpb24gYW5kIHJlY2FsbCBhdCBhIGdsb2JhbCBsZXZlbCwgaS5lLiwgd2l0aG91dCBjb25zaWRlcmluZyBUUkVDIHRvcGljcy4gVGhpcyBmaWxlIGluY2x1ZGVzIGluZm9ybWF0aW9uIGZvciBCTTI1IHdpdGggbXVsdGlwbGVzIHZhbHVlcyBmb3IgY29uc3RhbnRzIGsgYW5kIGJcdTAwM2MvbGlcdTAwM2Vcblx0XHUwMDNjL3VsXHUwMDNlXG5cdFx1MDAzYy9saVx1MDAzZVxuXHUwMDNjL3VsXHUwMDNlXG5cblx1MDAzY3BcdTAwM2VWaXN1YWxpemF0aW9uXHUwMDI2bmJzcDtmb3IgY29ycmVsYXRpb24gbWF0cml4ZXMgYXMgd2VsbCBhc1x1MDAyNm5ic3A7c2NhdHRlcmVkIHBsb3RzIGZvciBmdWxsLXRleHQgYmFzZWQgc2ltaWxhcml0eSBpcyBhdmFpbGFibGUgYXRcdTAwMjZuYnNwO2h0dHA6Ly9samdhcmNpYS5naXRodWIuaW8vc2Vtc2ltLmJlbmNobWFya1x1MDAzYy9wXHUwMDNlIl19LHsidGltZGV4UmVjb3JkSWQiOiJ6ZW5vZG86NDczNTgyMSIsInRpdGxlIjoiREFEQTIgZm9ybWF0dGVkIDE2UyByUk5BIGdlbmUgc2VxdWVuY2VzIGZvciBib3RoIGJhY3RlcmlhIFx1MDAyNiBhcmNoYWVhIiwiY29udGVudFR5cGUiOlsiRGF0YXNldCJdLCJjb250cmlidXRvcnMiOlt7ImtpbmQiOiJDcmVhdG9yIiwidmFsdWUiOiJBbGkgQWxpc2h1bSJ9LHsia2luZCI6IkNvbnRhY3RQZXJzb24iLCJ2YWx1ZSI6IkFsaSBBbGlzaHVtIn0seyJraW5kIjoiT3RoZXIiLCJ2YWx1ZSI6IlNlZXJzaG9sbSBGcmVkZXJpayJ9LHsia2luZCI6IkRhdGFDdXJhdG9yIiwidmFsdWUiOiJHcmVlbmZpZWxkIFBhdWwifSx7ImtpbmQiOiJSZXNlYXJjaGVyIiwidmFsdWUiOiJDaHJpc3RvcGhlcnNlbiBDbGF1cyJ9XSwicHVibGljYXRpb25JbmZvcm1hdGlvbiI6WyJaZW5vZG8iXSwiZGF0ZXMiOlt7ImtpbmQiOiJQdWJsaWNhdGlvbiBkYXRlIiwidmFsdWUiOiIyMDIxIn0seyJraW5kIjoiSXNzdWVkIiwidmFsdWUiOiIyMDIxLTA0LTI4In1dLCJsaW5rcyI6W3sia2luZCI6IkRpZ2l0YWwgb2JqZWN0IFVSTCIsInJlc3RyaWN0aW9ucyI6bnVsbCwidGV4dCI6IkRpZ2l0YWwgb2JqZWN0IFVSTCIsInVybCI6Imh0dHBzOi8vemVub2RvLm9yZy9yZWNvcmQvNDczNTgyMSJ9XSwibm90ZXMiOlt7ImtpbmQiOiJPdGhlciIsInZhbHVlIjpbIkJhc2ggc2NyaXB0IGNhbiBiZSBwcm92aWRlZCBvbiByZXF1ZXN0LiJdfSx7ImtpbmQiOiJPdGhlciIsInZhbHVlIjpbIntcInJlZmVyZW5jZXNcIjogW1wiUGFya3MsIEQuIEguLCBldCBhbC4gKDIwMTgpLiBcXFwiQSBzdGFuZGFyZGl6ZWQgYmFjdGVyaWFsIHRheG9ub215IGJhc2VkIG9uIGdlbm9tZSBwaHlsb2dlbnkgc3Vic3RhbnRpYWxseSByZXZpc2VzIHRoZSB0cmVlIG9mIGxpZmUuXFxcIiBOYXR1cmUgQmlvdGVjaG5vbG9neS5cIiwgXCJDb2xlLCBKLiBSLiwgUS4gV2FuZywgSi4gQS4gRmlzaCwgQi4gQ2hhaSwgRC4gTS4gTWNHYXJyZWxsLCBZLiBTdW4sIEMuIFQuIEJyb3duLCBBLiBQb3JyYXMtQWxmYXJvLCBDLiBSLiBLdXNrZSwgYW5kIEouIE0uIFRpZWRqZS4gMjAxNC4gUmlib3NvbWFsIERhdGFiYXNlIFByb2plY3Q6IGRhdGEgYW5kIHRvb2xzIGZvciBoaWdoIHRocm91Z2hwdXQgclJOQSBhbmFseXNpcyBOdWNsLiBBY2lkcyBSZXMuIDQyKERhdGFiYXNlIGlzc3VlKTpENjMzLUQ2NDI7IGRvaTogMTAuMTA5My9uYXIvZ2t0MTI0NCBbUE1JRDogMjQyODgzNjhdXCIsIFwiTkNCSSAxNlMgUmVmU2VxIE51Y2xlb3RpZGUgc2VxdWVuY2UgcmVjb3JkczogaHR0cHM6Ly93d3cubmNiaS5ubG0ubmloLmdvdi9udWNjb3JlP3Rlcm09MzMxNzUlNUJCaW9Qcm9qZWN0JTVEK09SKzMzMzE3JTVCQmlvUHJvamVjdCU1RFwiXX0iXX1dLCJoaWdobGlnaHQiOlt7Im1hdGNoZWRGaWVsZCI6Im5vdGVzLnZhbHVlIiwibWF0Y2hlZFBocmFzZXMiOlsiQWNpZHMgUmVzLiA0MihEYXRhYmFzZSBpc3N1ZSk6RDYzMy1ENjQyOyBkb2k6IDEwLjEwOTMvbmFyL2drdDEyNDQgW1x1MDAzY3NwYW4gY2xhc3M9XCJoaWdobGlnaHRcIlx1MDAzZVBNSURcdTAwM2Mvc3Bhblx1MDAzZTogMjQyODgzNjhdXCIsIFwiTkNCSSAxNlMgUmVmU2VxIl19XSwicHJvdmlkZXIiOm51bGwsInJpZ2h0cyI6W3sia2luZCI6bnVsbCwiZGVzY3JpcHRpb24iOiJDcmVhdGl2ZSBDb21tb25zIEF0dHJpYnV0aW9uIDQuMCBJbnRlcm5hdGlvbmFsIiwidXJpIjoiaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzQuMC9sZWdhbGNvZGUifSx7ImtpbmQiOm51bGwsImRlc2NyaXB0aW9uIjoiT3BlbiBBY2Nlc3MiLCJ1cmkiOiJpbmZvOmV1LXJlcG8vc2VtYW50aWNzL29wZW5BY2Nlc3MifV0sInNvdXJjZUxpbmsiOiJodHRwczovL3plbm9kby5vcmcvcmVjb3JkLzQ3MzU4MjEiLCJzdW1tYXJ5IjpbIlx1MDAzY3BcdTAwM2VcdTAwM2NzdHJvbmdcdTAwM2VcdTAwM2NlbVx1MDAzZVRoaXMgdmVyc2lvbiBpcyB0byBzdGF5IHVwIHRvIGRhdGUgd2l0aCB0aGUgaW1wcm92ZW1lbnRzIGFuZCBpbmNyZWFzZSAoNTAlIG1vcmUpIG9mIDE2UyByUk5BIGdlbmUgc2VxdWVuY2VzIGFkZGVkIHRvIHRoZSBHVERCXHUwMDI2bmJzcDtyZWxlYXNlIDIwMi5cdTAwMjZuYnNwOyBQbGVhc2UgcmVhZCB0aGlzIHBvc3QgZm9yIHRoZSBzdGF0cyBvbiB0aGUgdXBkYXRlcy5cdTAwMjZuYnNwO1x1MDAzYy9lbVx1MDAzZVx1MDAzYy9zdHJvbmdcdTAwM2VcdTAwM2NzdHJvbmdcdTAwM2VcdTAwM2NlbVx1MDAzZWh0dHBzOi8vZ3RkYi5lY29nZW5vbWljLm9yZy9zdGF0cy9yMjAyXHUwMDNjL2VtXHUwMDNlXHUwMDNjL3N0cm9uZ1x1MDAzZVx1MDAzY3N0cm9uZ1x1MDAzZVx1MDAzY2VtXHUwMDNlIC5cdTAwM2MvZW1cdTAwM2VcdTAwM2Mvc3Ryb25nXHUwMDNlXHUwMDNjc3Ryb25nXHUwMDNlXHUwMDNjZW1cdTAwM2UgXHUwMDNjL2VtXHUwMDNlXHUwMDNjL3N0cm9uZ1x1MDAzZVx1MDAzYy9wXHUwMDNlXG5cblx1MDAzY3BcdTAwM2VcdTAwM2NzdHJvbmdcdTAwM2VcdTAwM2NlbVx1MDAzZVRoZXJlIGhhcyBiZWVuIG5vIGNoYW5nZSB0byB0aGUgUkRQLVJlZlNlcSByZWZlcmVuY2UgZGF0YWJhc2VcdTAwM2MvZW1cdTAwM2VcdTAwM2Mvc3Ryb25nXHUwMDNlXHUwMDNjL3BcdTAwM2VcblxuXHUwMDNjcFx1MDAzZVx1MDAzY3N0cm9uZ1x1MDAzZVx1MDAzY2VtXHUwMDNlSWYgYW55b25lIGhhcyBjb25jZXJuc1x1MDAyNm5ic3A7d2l0aCBNQUcgZXh0cmFjdGVkIDE2UyByUk5BIGdlbmUgY29udGFtaW5hdGlvbiBjb25jZXJucywgdGhlbiBJIHN1Z2dlc3QgdGhhdCB0aGV5IGNvbnRhY3QgdGhlIGN1cmF0b3JzIG9mIEdUREIgdGhlbXNlbHZlcyBiZWNhdXNlIGl0IGlzIG91dHNpZGUgb2YgbXkgcm9sZSB3aXRoIHRoZXNlIHJlc291cmNlcyBkZXNpZ25lZCBmb3IgREFEQTIgdXNhZ2Ugb25seS4gQW5vdGhlciBjb25jZXJuIHRoYXQgd2FzIHJhaXNlZCB3YXMgdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBEQiBzZXF1ZW5jZXMsIHRvIGdldCBwYXN0IHRoaXMgcHJvYmxlbSBwbGVhc2UgdXNlIHRoZSB0cnlSQyA9IFRSVUUgYXJndW1lbnQgaW4gdGhlIGFzc2lnblRheG9ub215IGNvbW1hbmQgd2l0aGluIERBREEyLCB0aGlzIHdpbGwgc2VhcmNoIHlvdXIgQVNWcyBpbiB0aGUgcmV2ZXJzZSBjb21wbGVtZW50IGFzIHdlbGwuXHUwMDI2bmJzcDtcdTAwMjZuYnNwO1x1MDAzYy9lbVx1MDAzZVx1MDAzYy9zdHJvbmdcdTAwM2VcdTAwM2MvcFx1MDAzZVxuXG5cdTAwM2NwXHUwMDNlXHUwMDI2bmJzcDtcdTAwM2MvcFx1MDAzZVxuXG5cdTAwM2NwXHUwMDNlVGhpcyBWZXJzaW9uIHdhcyBwcmltYXJpbHkgdXBkYXRlZCBiZWNhdXNlIHdlIGhhdmUgcmVjZW50bHkgdXBkYXRlZCB0aGUgUmVmU2VxK1JEUCBkYXRhYmFzZSBhbmQgYWxzbyBpbmNsdWRlZCBtaXRvY2hvbmRyaWFsIGFuZCBldWthcnlvdGljIDE2UyByUk5BIHNlcXVlbmNlcy5cdTAwMjZuYnNwO0Fsc28gYmVjYXVzZSBJXHUwMDI2bmJzcDtkZWNpZGVkIHRvIGluY2x1ZGUgdGhlIHJlcXVpcmVkIGZvcm1hdHMgdG8gYmUgYWJsZSB0byB1c2UgdGhlIGFkZFNwZWNpZXMgY29tbWFuZCBpbiBEQURBMi4gVGhpcyBjb21tYW5kIHNlYXJjaGVzIHRoZSBkYXRhYmFzZSBhdCAxMDAlIGlkZW50aXR5IGFuZCBoYXMgdGhlIGZsZXhpYmlsaXR5IHRvIGVpdGhlciBnZXQgdGhlIGJlc3QgaGl0IG9yIG11bHRpcGxlIGhpdHMgdG8geW91ciBhbXBsaWNvbi4gSSByZWNvbW1lbmQgaXQgaWYgeW91IGFyZSB1c2luZyBhIHNpbmdsZSBvciAyIHJlZ2lvbiBhbXBsaWNvbnMgb2YgdGhlIDE2UyByUk5BIGdlbmUuXHUwMDNjL3BcdTAwM2VcblxuXHUwMDNjcFx1MDAzZVRoZXNlIHR3byBjb21iaW5lZCBiYWN0ZXJpYWwgYW5kIGFyY2hhZWFsIDE2UyByUk5BIGdlbmUgc2VxdWVuY2UgZGF0YWJhc2VzIHdlcmUgY29sbGF0ZWQgZnJvbSB2YXJpb3VzIHNvdXJjZXMgYW5kIGZvcm1hdHRlZCBmb3IgdGhlIHB1cnBvc2Ugb2YgdXNpbmcgdGhlIFx1MDAyNnF1b3Q7YXNzaWduVGF4b25vbXlcdTAwMjZxdW90OyBjb21tYW5kIHdpdGhpbiB0aGUgREFEQTJcdTAwMjZuYnNwO3BpcGVsaW5lLlx1MDAyNm5ic3A7VGhlIGRhdGEgd2FzIGNvbnZlcnRlZCB0byBzdWl0ZSBEQURBMiBmb3JtYXQgYnkgQWxpc2h1bSBBbGkuXHUwMDNjL3BcdTAwM2VcblxuXHUwMDNjb2xcdTAwM2Vcblx0XHUwMDNjbGlcdTAwM2VSZWZTZXErUkRQOiBUaGlzIGRhdGFiYXNlIGNvbnRhaW5zIDIyNDMzXHUwMDI2bmJzcDtiYWN0ZXJpYWwsXHUwMDI2bmJzcDsxMDU1XHUwMDI2bmJzcDthcmNoYWVhIGFuZCA5OSBldWthcnlvdGljXHUwMDI2bmJzcDtmdWxsIGxlbmd0aHMxNlMgclJOQSBnZW5lIHNlcXVlbmNlcy5cdTAwMjZuYnNwOyBJdCB3YXMgY29tcGlsZWQgYnkgXHUwMDNjc3Ryb25nXHUwMDNlUGF1bCBHcmVlbmZpZWxkIFx1MDAzYy9zdHJvbmdcdTAwM2VvbiB0aGVcdTAwMjZuYnNwO1x1MDAzY3N0cm9uZ1x1MDAzZTA2LzExLzIwMjBcdTAwM2Mvc3Ryb25nXHUwMDNlXHUwMDI2bmJzcDtmcm9tIHByZWRvbWluYW50bHkgdGhlIE5DQkkgUmVmU2VxIDE2UyByUk5BIGRhdGFiYXNlIChodHRwczovL3d3dy5uY2JpLm5sbS5uaWguZ292L3JlZnNlcS90YXJnZXRlZGxvY2kvMTZTX3Byb2Nlc3MvKVx1MDAyNm5ic3A7YW5kIHdhcyBzdXBwbGVtZW50ZWQgd2l0aCBleHRyYVx1MDAyNm5ic3A7c2VxdWVuY2VzIGZyb20gdGhlXHUwMDI2bmJzcDtSRFAgZGF0YWJhc2UgKGh0dHBzOi8vcmRwLmNtZS5tc3UuZWR1L21pc2MvcmVzb3VyY2VzLmpzcCkuXHUwMDNjL2xpXHUwMDNlXG5cdFx1MDAzY2xpXHUwMDNlR2Vub21lIFRheG9ub215IERhdGFiYXNlIChHVERCKTogVGhlIG5ldyB2ZXJzaW9uIG9mIG91ciBkYWRhMiBmb3JtYXR0ZWQgR1REQiByZWZlcmVuY2Ugc2VxdWVuY2VzIG5vdyBjb250YWlucyAzMTMxOVx1MDAyNm5ic3A7YmFjdGVyaWEgYW5kIDE1NjVcdTAwMjZuYnNwO2FyY2hhZWEgZnVsbCAxNlMgclJOQSBnZW5lIHNlcXVlbmNlcy5cdTAwMjZuYnNwO0lmIHlvdSB3b25kZXIgd2h5IHRoZXJlIGFyZSBmZXdlciBzcGVjaWVzIHdpdGggMTZTIHJSTkEsIHRoYXQgaXMgYmVjYXVzZSBzb21lIG1ldGFnZW5vbWljcyBhc3NlbWJsZWQgZ2Vub21lcyAoTUFHcykgbGFja1x1MDAyNm5ic3A7dGhlIDE2UyBnZW5lIGFuZCB0aHVzIGNhbm5vdCBiZSBleHRyYWN0ZWQuXHUwMDI2bmJzcDsgVGhlIGRhdGFiYXNlIHdhcyBkb3dubG9hZGVkIGZyb20gXHUwMDNjYSBocmVmPVwiaHR0cHM6Ly9kYXRhLmFjZS51cS5lZHUuYXUvcHVibGljL2d0ZGIvZGF0YS9yZWxlYXNlcy9yZWxlYXNlOTUvXCJcdTAwM2VodHRwczovL2RhdGEuYWNlLnVxLmVkdS5hdS9wdWJsaWMvZ3RkYi9kYXRhL3JlbGVhc2VzL1x1MDAzYy9hXHUwMDNlXHUwMDI2bmJzcDtvbiAyOC8wNC8yMDIwLlx1MDAyNm5ic3A7UGxlYXNlIHJlYWQgdGhlIHJlbGVhc2Ugbm90ZXMgYW5kIGZpbGUgZGVzY3JpcHRpb25zLlx1MDAyNm5ic3A7XHUwMDNjL2xpXHUwMDNlXG5cdTAwM2Mvb2xcdTAwM2VcblxuXHUwMDNjcFx1MDAzZVRoZSBmb3JtYXR0aW5nIHRvIERBREEyXHUwMDI2bmJzcDt3YXMgZG9uZSB1c2luZyBzaW1wbGUgYXdrIGJhc2ggc2NyaXB0cy4gVGhlIHNjcmlwdFx1MDAyNm5ic3A7dGFrZXNcdTAwMjZuYnNwO2FzIGlucHV0IGFcdTAwMjZuYnNwO2Zhc3RhXHUwMDI2bmJzcDtmaWxlIGFuZCBhIHRhYi1kZWxpbWl0ZWQgdGF4b25vbXkgZmlsZVx1MDAyNm5ic3A7KHNsaWdodGx5IGVkaXRlZCB0byByZW1vdmUgc3BlY2lhbCBjaGFyYWN0ZXJzKSBhbmQgdGhlbiBpdFx1MDAyNm5ic3A7b3V0cHV0cyBhIGZhc3RhIGZpbGUgd2l0aCBhbGwgNyB0YXhvbm9teSByYW5rcyBzZXBhcmF0ZWQgYnkgXHUwMDI2cXVvdDs7XHUwMDI2cXVvdDsgYXMgcmVxdWlyZWQgZm9yIERBREEyIGNvbXBhdGliaWxpdHkuIEFkZGl0aW9uYWxseSxcdTAwMjZuYnNwO3dlIGhhdmUgY29uY2F0ZW5hdGVkXHUwMDI2bmJzcDt0aGUgdW5pcXVlXHUwMDI2bmJzcDtzZXF1ZW5jZSBJRCBiZSBpdCBOQ0JJL1JEUCBvciBHVERCXHUwMDI2bmJzcDtJRCB0byB0aGUgc3BlY2llcyBlbnRyeSAoYnV0IHJlcGxhY2VkIHRoZSBcdTAwMjZxdW90Oy5cdTAwMjZxdW90OyB3aXRoIGFuIFx1MDAyNnF1b3Q7IF9cdTAwMjZxdW90Oy4gV2Ugc2VlIHRoaXMgYXMgYW4gaW1wb3J0YW50IFFDIHN0ZXAgdG8gaGlnaGxpZ2h0IHRoZSBpc3N1ZXMvY29uZmlkZW5jZSBhc3NvY2lhdGVkIHdpdGggc2hvcnQgcmVhZCB0YXhvbm9teSBhc3NpZ25tZW50IGF0IHRoZSBmaW5lciByYW5rIGxldmVscy5cdTAwM2MvcFx1MDAzZVxuXG5cdTAwM2NwXHUwMDNlQWxzbywgdGhpcyB1cGRhdGUgaW5jbHVkZXMgdHdvIG90aGVyIGZpbGVzIHRoYXQgeW91IGNhbiB1c2Ugd2l0aCB0aGUgYXNzaWduVGF4b25vbXkgYW5kIGFkZFNwZWNpZXMgY29tbWFuZHMgaW4gREFEQTIuXHUwMDNjL3BcdTAwM2UiXX0seyJ0aW1kZXhSZWNvcmRJZCI6Inplbm9kbzoyNTQxMjM5IiwidGl0bGUiOiJEQURBMiBmb3JtYXR0ZWQgMTZTIHJSTkEgZ2VuZSBzZXF1ZW5jZXMgZm9yIGJvdGggYmFjdGVyaWEgXHUwMDI2IGFyY2hhZWEiLCJjb250ZW50VHlwZSI6WyJEYXRhc2V0Il0sImNvbnRyaWJ1dG9ycyI6W3sia2luZCI6IkNyZWF0b3IiLCJ2YWx1ZSI6IkFsaSBBbGlzaHVtIn0seyJraW5kIjoiQ29udGFjdFBlcnNvbiIsInZhbHVlIjoiQWxpIEFsaXNodW0ifSx7ImtpbmQiOiJPdGhlciIsInZhbHVlIjoiU2VlcnNob2xtIEZyZWRlcmlrIn0seyJraW5kIjoiRGF0YUN1cmF0b3IiLCJ2YWx1ZSI6IkdyZWVuZmllbGQgUGF1bCJ9LHsia2luZCI6IlJlc2VhcmNoZXIiLCJ2YWx1ZSI6IkNocmlzdG9waGVyc2VuIENsYXVzIn1dLCJwdWJsaWNhdGlvbkluZm9ybWF0aW9uIjpbIlplbm9kbyJdLCJkYXRlcyI6W3sia2luZCI6IlB1YmxpY2F0aW9uIGRhdGUiLCJ2YWx1ZSI6IjIwMTkifSx7ImtpbmQiOiJJc3N1ZWQiLCJ2YWx1ZSI6IjIwMTktMDEtMTYifV0sImxpbmtzIjpbeyJraW5kIjoiRGlnaXRhbCBvYmplY3QgVVJMIiwicmVzdHJpY3Rpb25zIjpudWxsLCJ0ZXh0IjoiRGlnaXRhbCBvYmplY3QgVVJMIiwidXJsIjoiaHR0cHM6Ly96ZW5vZG8ub3JnL3JlY29yZC8yNTQxMjM5In1dLCJub3RlcyI6W3sia2luZCI6Ik90aGVyIiwidmFsdWUiOlsiUHl0aG9uIHNjcmlwdCBjYW4gYmUgcHJvdmlkZWQgb24gcmVxdWVzdC4iXX0seyJraW5kIjoiT3RoZXIiLCJ2YWx1ZSI6WyJ7XCJyZWZlcmVuY2VzXCI6IFtcIlBhcmtzLCBELiBILiwgZXQgYWwuICgyMDE4KS4gXFxcIkEgc3RhbmRhcmRpemVkIGJhY3RlcmlhbCB0YXhvbm9teSBiYXNlZCBvbiBnZW5vbWUgcGh5bG9nZW55IHN1YnN0YW50aWFsbHkgcmV2aXNlcyB0aGUgdHJlZSBvZiBsaWZlLlxcXCIgTmF0dXJlIEJpb3RlY2hub2xvZ3kuXCIsIFwiQ29sZSwgSi4gUi4sIFEuIFdhbmcsIEouIEEuIEZpc2gsIEIuIENoYWksIEQuIE0uIE1jR2FycmVsbCwgWS4gU3VuLCBDLiBULiBCcm93biwgQS4gUG9ycmFzLUFsZmFybywgQy4gUi4gS3Vza2UsIGFuZCBKLiBNLiBUaWVkamUuIDIwMTQuIFJpYm9zb21hbCBEYXRhYmFzZSBQcm9qZWN0OiBkYXRhIGFuZCB0b29scyBmb3IgaGlnaCB0aHJvdWdocHV0IHJSTkEgYW5hbHlzaXMgTnVjbC4gQWNpZHMgUmVzLiA0MihEYXRhYmFzZSBpc3N1ZSk6RDYzMy1ENjQyOyBkb2k6IDEwLjEwOTMvbmFyL2drdDEyNDQgW1BNSUQ6IDI0Mjg4MzY4XVwiLCBcIk5DQkkgMTZTIFJlZlNlcSBOdWNsZW90aWRlIHNlcXVlbmNlIHJlY29yZHM6IGh0dHBzOi8vd3d3Lm5jYmkubmxtLm5paC5nb3YvbnVjY29yZT90ZXJtPTMzMTc1JTVCQmlvUHJvamVjdCU1RCtPUiszMzMxNyU1QkJpb1Byb2plY3QlNURcIl19Il19XSwiaGlnaGxpZ2h0IjpbeyJtYXRjaGVkRmllbGQiOiJub3Rlcy52YWx1ZSIsIm1hdGNoZWRQaHJhc2VzIjpbIkFjaWRzIFJlcy4gNDIoRGF0YWJhc2UgaXNzdWUpOkQ2MzMtRDY0MjsgZG9pOiAxMC4xMDkzL25hci9na3QxMjQ0IFtcdTAwM2NzcGFuIGNsYXNzPVwiaGlnaGxpZ2h0XCJcdTAwM2VQTUlEXHUwMDNjL3NwYW5cdTAwM2U6IDI0Mjg4MzY4XVwiLCBcIk5DQkkgMTZTIFJlZlNlcSJdfV0sInByb3ZpZGVyIjpudWxsLCJyaWdodHMiOlt7ImtpbmQiOm51bGwsImRlc2NyaXB0aW9uIjoiQ3JlYXRpdmUgQ29tbW9ucyBBdHRyaWJ1dGlvbiA0LjAgSW50ZXJuYXRpb25hbCIsInVyaSI6Imh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS80LjAvbGVnYWxjb2RlIn0seyJraW5kIjpudWxsLCJkZXNjcmlwdGlvbiI6Ik9wZW4gQWNjZXNzIiwidXJpIjoiaW5mbzpldS1yZXBvL3NlbWFudGljcy9vcGVuQWNjZXNzIn1dLCJzb3VyY2VMaW5rIjoiaHR0cHM6Ly96ZW5vZG8ub3JnL3JlY29yZC8yNTQxMjM5Iiwic3VtbWFyeSI6WyJcdTAwM2NwXHUwMDNlVGhlc2UgdHdvIGNvbWJpbmVkIGJhY3RlcmlhbCBhbmQgYXJjaGFlYWwgMTZTIHJSTkEgZ2VuZSBzZXF1ZW5jZSBkYXRhYmFzZXMgd2VyZSBjb2xsYXRlZCBmcm9tIHZhcmlvdXMgc291cmNlcyBhbmQgZm9ybWF0dGVkIGZvciB0aGUgcHVycG9zZSBvZiB1c2luZyB0aGUgXHUwMDI2cXVvdDthc3NpZ25UYXhvbm9teVx1MDAyNnF1b3Q7IGNvbW1hbmQgd2l0aGluIHRoZSBEQURBMlx1MDAyNm5ic3A7cGlwZWxpbmUuXHUwMDNjL3BcdTAwM2VcblxuXHUwMDNjb2xcdTAwM2Vcblx0XHUwMDNjbGlcdTAwM2VSZWZTZXErUkRQOiBUaGlzIGRhdGFiYXNlIGNvbnRhaW5zIDE0Njc2IGJhY3RlcmlhbCBcdTAwMjZhbXA7IDY2MCBhcmNoYWVhIGZ1bGwgMTZTIHJSTkEgZ2VuZSBzZXF1ZW5jZXMuXHUwMDI2bmJzcDsgSXQgd2FzIGNvbXBpbGVkIGluIDE0LzA1LzIwMTggZnJvbSBwcmVkb21pbmFudGx5IHRoZSBOQ0JJIFJlZlNlcSAxNlMgcnJuYSBkYXRhYmFzZSAoaHR0cHM6Ly93d3cubmNiaS5ubG0ubmloLmdvdi9yZWZzZXEvdGFyZ2V0ZWRsb2NpLzE2U19wcm9jZXNzLylcdTAwMjZuYnNwO2FuZCB3YXMgc3VwcGxlbWVudGVkIHdpdGggZXh0cmFcdTAwMjZuYnNwO3NlcXVlbmNlcyBmcm9tIHRoZVx1MDAyNm5ic3A7UkRQIGRhdGFiYXNlIChodHRwczovL3JkcC5jbWUubXN1LmVkdS9taXNjL3Jlc291cmNlcy5qc3ApLlx1MDAzYy9saVx1MDAzZVxuXHRcdTAwM2NsaVx1MDAzZUdlbm9tZSBUYXhvbm9teSBEYXRhYmFzZSAoR1REQik6IG91ciBkYWRhMiBmb3JtYXR0ZWQgR1REQiByZWZlcmVuY2Ugc2VxdWVuY2Ugc2V0IGNvbnRhaW5zIDIwNDg2IGJhY3RlcmlhIGFuZCAxMDczIGFyY2hhZWEgZnVsbCAxNlMgclJOQSBnZW5lIHNlcXVlbmNlcy4gVGhlIGRhdGFiYXNlIHdhcyBkb3dubG9hZGVkIGZyb20gKFx1MDAzY2EgaHJlZj1cImh0dHBzOi8vdC5jby9iSWpwckpzWVVoXCJcdTAwM2VodHRwOi8vZ3RkYi5lY29nZW5vbWljLm9yZy9kb3dubG9hZHNcdTAwM2MvYVx1MDAzZSlcdTAwMjZuYnNwO29uIDIwLzExLzIwMTguXHUwMDNjL2xpXHUwMDNlXG5cdTAwM2Mvb2xcdTAwM2VcblxuXHUwMDNjcFx1MDAzZVRoZSBmb3JtYXR0aW5nIHRvIERBREEyIGZvcm1hdCBvZiB0aGUgZGF0YWJhc2VzIHdhcyBkb25lIHVzaW5nIGEgbG9jYWxseSB3cml0dGVuIHB5dGhvbiAyLjcgc2NyaXB0LiBUaGUgc2NyaXB0XHUwMDI2bmJzcDt0YWtlc1x1MDAyNm5ic3A7YXMgaW5wdXQgYSB0YXhvbm9teSAudHh0IGZpbGUgYW5kIGEgZmFzdGFcdTAwMjZuYnNwO2ZpbGUgYXMgcHJvdmlkZWQgYnkgdGhlIGNvcmUgZGF0YWJhc2VzIGNyZWF0b3JzIGFuZCB0aGVuIHRoZXNlIHR3byBmaWxlcyBhcmUgbWF0Y2hlZCBhY2NvcmRpbmcgdG8gYSB1bmlxdWUgc2VxdWVuY2UgaWRlbnRpZmllciBhdmFpbGFibGUgaW4gYm90aCBmaWxlcy4gVGhlbiBpdFx1MDAyNm5ic3A7b3V0cHV0cyBhIGZhc3RhIGZpbGUgd2l0aCBhbGwgNyB0YXhvbm9teSByYW5rcyBzZXBhcmF0ZWQgYnkgXHUwMDI2cXVvdDs7XHUwMDI2cXVvdDsgYXMgcmVxdWlyZWQgZm9yIERBREEyIGNvbXBhdGliaWxpdHkuIEFkZGl0aW9uYWxseSxcdTAwMjZuYnNwO3dlIGhhdmUgY29uY2F0ZW5hdGVkXHUwMDI2bmJzcDt0aGUgdW5pcXVlXHUwMDI2bmJzcDtzZXF1ZW5jZSBJRCBiZSBpdCBOQ0JJL1JEUCBvciBHVERCXHUwMDI2bmJzcDtJRCB0byB0aGUgc3BlY2llcyBlbnRyeS4gV2Ugc2VlIHRoaXMgYXMgYW4gaW1wb3J0YW50IFFDIHN0ZXAgdG8gaGlnaGxpZ2h0IHRoZSBpc3N1ZXMvY29uZmlkZW5jZSBhc3NvY2lhdGVkIHdpdGggc2hvcnQgcmVhZCB0YXhvbm9teSBhc3NpZ25tZW50IGF0IHRoZSBtb3JlIGZpbmVyIHJhbmsgbGV2ZWxzLlx1MDAzYy9wXHUwMDNlIl19LHsidGltZGV4UmVjb3JkSWQiOiJ6ZW5vZG86MzE4ODMzNCIsInRpdGxlIjoiREFEQTIgZm9ybWF0dGVkIDE2UyByUk5BIGdlbmUgc2VxdWVuY2VzIGZvciBib3RoIGJhY3RlcmlhIFx1MDAyNiBhcmNoYWVhIiwiY29udGVudFR5cGUiOlsiRGF0YXNldCJdLCJjb250cmlidXRvcnMiOlt7ImtpbmQiOiJDcmVhdG9yIiwidmFsdWUiOiJBbGkgQWxpc2h1bSJ9LHsia2luZCI6IkNvbnRhY3RQZXJzb24iLCJ2YWx1ZSI6IkFsaSBBbGlzaHVtIn0seyJraW5kIjoiT3RoZXIiLCJ2YWx1ZSI6IlNlZXJzaG9sbSBGcmVkZXJpayJ9LHsia2luZCI6IkRhdGFDdXJhdG9yIiwidmFsdWUiOiJHcmVlbmZpZWxkIFBhdWwifSx7ImtpbmQiOiJSZXNlYXJjaGVyIiwidmFsdWUiOiJDaHJpc3RvcGhlcnNlbiBDbGF1cyJ9XSwicHVibGljYXRpb25JbmZvcm1hdGlvbiI6WyJaZW5vZG8iXSwiZGF0ZXMiOlt7ImtpbmQiOiJQdWJsaWNhdGlvbiBkYXRlIiwidmFsdWUiOiIyMDE5In0seyJraW5kIjoiSXNzdWVkIiwidmFsdWUiOiIyMDE5LTAxLTE2In1dLCJsaW5rcyI6W3sia2luZCI6IkRpZ2l0YWwgb2JqZWN0IFVSTCIsInJlc3RyaWN0aW9ucyI6bnVsbCwidGV4dCI6IkRpZ2l0YWwgb2JqZWN0IFVSTCIsInVybCI6Imh0dHBzOi8vemVub2RvLm9yZy9yZWNvcmQvMzE4ODMzNCJ9XSwibm90ZXMiOlt7ImtpbmQiOiJPdGhlciIsInZhbHVlIjpbIlRoZSBSZWZTZXErUkRQIGRhdGFiYXNlIHdhcyB1cGRhdGVkIGR1ZSB0byBhIHF1b3RhdGlvbiBtYXJrIGJ1ZyB0aGF0IHdhcyB3cm9uZ2x5IHBsYWNlZCBpbiBmcm9udCBvZiBzb21lIG9mIHRoZSBzcGVjaWVzIG5hbWVzLiBBIGZpbGUgd2l0aCBhbGwgdGhlIGFmZmVjdGVkIHNwZWNpZXMgbmFtZXMgaGFzIGJlZW4gdXBsb2FkZWQgdG8gcmV2aWV3LiBUaGlzIHNob3VsZG4ndCBhZmZlY3QgYW55IGFzc2lnbm1lbnRzIGJ1dCBtaWdodCBoYXZlIGNhdXNlZCBzb21lIGlzc3VlcyByZWFkaW5nIGludG8gUi4gIFxuXG5QeXRob24gc2NyaXB0IGNhbiBiZSBwcm92aWRlZCBvbiByZXF1ZXN0LiJdfSx7ImtpbmQiOiJPdGhlciIsInZhbHVlIjpbIntcInJlZmVyZW5jZXNcIjogW1wiUGFya3MsIEQuIEguLCBldCBhbC4gKDIwMTgpLiBcXFwiQSBzdGFuZGFyZGl6ZWQgYmFjdGVyaWFsIHRheG9ub215IGJhc2VkIG9uIGdlbm9tZSBwaHlsb2dlbnkgc3Vic3RhbnRpYWxseSByZXZpc2VzIHRoZSB0cmVlIG9mIGxpZmUuXFxcIiBOYXR1cmUgQmlvdGVjaG5vbG9neS5cIiwgXCJDb2xlLCBKLiBSLiwgUS4gV2FuZywgSi4gQS4gRmlzaCwgQi4gQ2hhaSwgRC4gTS4gTWNHYXJyZWxsLCBZLiBTdW4sIEMuIFQuIEJyb3duLCBBLiBQb3JyYXMtQWxmYXJvLCBDLiBSLiBLdXNrZSwgYW5kIEouIE0uIFRpZWRqZS4gMjAxNC4gUmlib3NvbWFsIERhdGFiYXNlIFByb2plY3Q6IGRhdGEgYW5kIHRvb2xzIGZvciBoaWdoIHRocm91Z2hwdXQgclJOQSBhbmFseXNpcyBOdWNsLiBBY2lkcyBSZXMuIDQyKERhdGFiYXNlIGlzc3VlKTpENjMzLUQ2NDI7IGRvaTogMTAuMTA5My9uYXIvZ2t0MTI0NCBbUE1JRDogMjQyODgzNjhdXCIsIFwiTkNCSSAxNlMgUmVmU2VxIE51Y2xlb3RpZGUgc2VxdWVuY2UgcmVjb3JkczogaHR0cHM6Ly93d3cubmNiaS5ubG0ubmloLmdvdi9udWNjb3JlP3Rlcm09MzMxNzUlNUJCaW9Qcm9qZWN0JTVEK09SKzMzMzE3JTVCQmlvUHJvamVjdCU1RFwiXX0iXX1dLCJoaWdobGlnaHQiOlt7Im1hdGNoZWRGaWVsZCI6Im5vdGVzLnZhbHVlIiwibWF0Y2hlZFBocmFzZXMiOlsiQWNpZHMgUmVzLiA0MihEYXRhYmFzZSBpc3N1ZSk6RDYzMy1ENjQyOyBkb2k6IDEwLjEwOTMvbmFyL2drdDEyNDQgW1x1MDAzY3NwYW4gY2xhc3M9XCJoaWdobGlnaHRcIlx1MDAzZVBNSURcdTAwM2Mvc3Bhblx1MDAzZTogMjQyODgzNjhdXCIsIFwiTkNCSSAxNlMgUmVmU2VxIl19XSwicHJvdmlkZXIiOm51bGwsInJpZ2h0cyI6W3sia2luZCI6bnVsbCwiZGVzY3JpcHRpb24iOiJDcmVhdGl2ZSBDb21tb25zIEF0dHJpYnV0aW9uIDQuMCBJbnRlcm5hdGlvbmFsIiwidXJpIjoiaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzQuMC9sZWdhbGNvZGUifSx7ImtpbmQiOm51bGwsImRlc2NyaXB0aW9uIjoiT3BlbiBBY2Nlc3MiLCJ1cmkiOiJpbmZvOmV1LXJlcG8vc2VtYW50aWNzL29wZW5BY2Nlc3MifV0sInNvdXJjZUxpbmsiOiJodHRwczovL3plbm9kby5vcmcvcmVjb3JkLzMxODgzMzQiLCJzdW1tYXJ5IjpbIlx1MDAzY3BcdTAwM2VUaGVzZSB0d28gY29tYmluZWQgYmFjdGVyaWFsIGFuZCBhcmNoYWVhbCAxNlMgclJOQSBnZW5lIHNlcXVlbmNlIGRhdGFiYXNlcyB3ZXJlIGNvbGxhdGVkIGZyb20gdmFyaW91cyBzb3VyY2VzIGFuZCBmb3JtYXR0ZWQgZm9yIHRoZSBwdXJwb3NlIG9mIHVzaW5nIHRoZSBcdTAwMjZxdW90O2Fzc2lnblRheG9ub215XHUwMDI2cXVvdDsgY29tbWFuZCB3aXRoaW4gdGhlIERBREEyXHUwMDI2bmJzcDtwaXBlbGluZS5cdTAwM2MvcFx1MDAzZVxuXG5cdTAwM2NvbFx1MDAzZVxuXHRcdTAwM2NsaVx1MDAzZVJlZlNlcStSRFA6IFRoaXMgZGF0YWJhc2UgY29udGFpbnMgMTQ2NzYgYmFjdGVyaWFsIFx1MDAyNmFtcDsgNjYwIGFyY2hhZWEgZnVsbCAxNlMgclJOQSBnZW5lIHNlcXVlbmNlcy5cdTAwMjZuYnNwOyBJdCB3YXMgY29tcGlsZWQgaW4gMTQvMDUvMjAxOCBmcm9tIHByZWRvbWluYW50bHkgdGhlIE5DQkkgUmVmU2VxIDE2UyBycm5hIGRhdGFiYXNlIChodHRwczovL3d3dy5uY2JpLm5sbS5uaWguZ292L3JlZnNlcS90YXJnZXRlZGxvY2kvMTZTX3Byb2Nlc3MvKVx1MDAyNm5ic3A7YW5kIHdhcyBzdXBwbGVtZW50ZWQgd2l0aCBleHRyYVx1MDAyNm5ic3A7c2VxdWVuY2VzIGZyb20gdGhlXHUwMDI2bmJzcDtSRFAgZGF0YWJhc2UgKGh0dHBzOi8vcmRwLmNtZS5tc3UuZWR1L21pc2MvcmVzb3VyY2VzLmpzcCkuXHUwMDNjL2xpXHUwMDNlXG5cdFx1MDAzY2xpXHUwMDNlR2Vub21lIFRheG9ub215IERhdGFiYXNlIChHVERCKTogb3VyIGRhZGEyIGZvcm1hdHRlZCBHVERCIHJlZmVyZW5jZSBzZXF1ZW5jZSBzZXQgY29udGFpbnMgMjA0ODYgYmFjdGVyaWEgYW5kIDEwNzMgYXJjaGFlYSBmdWxsIDE2UyByUk5BIGdlbmUgc2VxdWVuY2VzLiBUaGUgZGF0YWJhc2Ugd2FzIGRvd25sb2FkZWQgZnJvbSAoXHUwMDNjYSBocmVmPVwiaHR0cHM6Ly90LmNvL2JJanBySnNZVWhcIlx1MDAzZWh0dHA6Ly9ndGRiLmVjb2dlbm9taWMub3JnL2Rvd25sb2Fkc1x1MDAzYy9hXHUwMDNlKVx1MDAyNm5ic3A7b24gMjAvMTEvMjAxOC5cdTAwM2MvbGlcdTAwM2Vcblx1MDAzYy9vbFx1MDAzZVxuXG5cdTAwM2NwXHUwMDNlVGhlIGZvcm1hdHRpbmcgdG8gREFEQTIgZm9ybWF0IG9mIHRoZSBkYXRhYmFzZXMgd2FzIGRvbmUgdXNpbmcgYSBsb2NhbGx5IHdyaXR0ZW4gcHl0aG9uIDIuNyBzY3JpcHQuIFRoZSBzY3JpcHRcdTAwMjZuYnNwO3Rha2VzXHUwMDI2bmJzcDthcyBpbnB1dCBhIHRheG9ub215IC50eHQgZmlsZSBhbmQgYSBmYXN0YVx1MDAyNm5ic3A7ZmlsZSBhcyBwcm92aWRlZCBieSB0aGUgY29yZSBkYXRhYmFzZXMgY3JlYXRvcnMgYW5kIHRoZW4gdGhlc2UgdHdvIGZpbGVzIGFyZSBtYXRjaGVkIGFjY29yZGluZyB0byBhIHVuaXF1ZSBzZXF1ZW5jZSBpZGVudGlmaWVyIGF2YWlsYWJsZSBpbiBib3RoIGZpbGVzLiBUaGVuIGl0XHUwMDI2bmJzcDtvdXRwdXRzIGEgZmFzdGEgZmlsZSB3aXRoIGFsbCA3IHRheG9ub215IHJhbmtzIHNlcGFyYXRlZCBieSBcdTAwMjZxdW90OztcdTAwMjZxdW90OyBhcyByZXF1aXJlZCBmb3IgREFEQTIgY29tcGF0aWJpbGl0eS4gQWRkaXRpb25hbGx5LFx1MDAyNm5ic3A7d2UgaGF2ZSBjb25jYXRlbmF0ZWRcdTAwMjZuYnNwO3RoZSB1bmlxdWVcdTAwMjZuYnNwO3NlcXVlbmNlIElEIGJlIGl0IE5DQkkvUkRQIG9yIEdUREJcdTAwMjZuYnNwO0lEIHRvIHRoZSBzcGVjaWVzIGVudHJ5LiBXZSBzZWUgdGhpcyBhcyBhbiBpbXBvcnRhbnQgUUMgc3RlcCB0byBoaWdobGlnaHQgdGhlIGlzc3Vlcy9jb25maWRlbmNlIGFzc29jaWF0ZWQgd2l0aCBzaG9ydCByZWFkIHRheG9ub215IGFzc2lnbm1lbnQgYXQgdGhlIG1vcmUgZmluZXIgcmFuayBsZXZlbHMuXHUwMDNjL3BcdTAwM2UiXX0seyJ0aW1kZXhSZWNvcmRJZCI6Inplbm9kbzozMjY2Nzk4IiwidGl0bGUiOiJEQURBMiBmb3JtYXR0ZWQgMTZTIHJSTkEgZ2VuZSBzZXF1ZW5jZXMgZm9yIGJvdGggYmFjdGVyaWEgXHUwMDI2IGFyY2hhZWEiLCJjb250ZW50VHlwZSI6WyJEYXRhc2V0Il0sImNvbnRyaWJ1dG9ycyI6W3sia2luZCI6IkNyZWF0b3IiLCJ2YWx1ZSI6IkFsaSBBbGlzaHVtIn0seyJraW5kIjoiQ29udGFjdFBlcnNvbiIsInZhbHVlIjoiQWxpIEFsaXNodW0ifSx7ImtpbmQiOiJPdGhlciIsInZhbHVlIjoiU2VlcnNob2xtIEZyZWRlcmlrIn0seyJraW5kIjoiRGF0YUN1cmF0b3IiLCJ2YWx1ZSI6IkdyZWVuZmllbGQgUGF1bCJ9LHsia2luZCI6IlJlc2VhcmNoZXIiLCJ2YWx1ZSI6IkNocmlzdG9waGVyc2VuIENsYXVzIn1dLCJwdWJsaWNhdGlvbkluZm9ybWF0aW9uIjpbIlplbm9kbyJdLCJkYXRlcyI6W3sia2luZCI6IlB1YmxpY2F0aW9uIGRhdGUiLCJ2YWx1ZSI6IjIwMTkifSx7ImtpbmQiOiJJc3N1ZWQiLCJ2YWx1ZSI6IjIwMTktMDctMDMifV0sImxpbmtzIjpbeyJraW5kIjoiRGlnaXRhbCBvYmplY3QgVVJMIiwicmVzdHJpY3Rpb25zIjpudWxsLCJ0ZXh0IjoiRGlnaXRhbCBvYmplY3QgVVJMIiwidXJsIjoiaHR0cHM6Ly96ZW5vZG8ub3JnL3JlY29yZC8zMjY2Nzk4In1dLCJub3RlcyI6W3sia2luZCI6Ik90aGVyIiwidmFsdWUiOlsiVGhlIFJlZlNlcStSRFAgZGF0YWJhc2Ugd2FzIHVwZGF0ZWQgZHVlIHRvIGEgcXVvdGF0aW9uIG1hcmsgYnVnIHRoYXQgd2FzIHdyb25nbHkgcGxhY2VkIGluIGZyb250IG9mIHNvbWUgb2YgdGhlIHNwZWNpZXMgbmFtZXMuIEEgZmlsZSB3aXRoIGFsbCB0aGUgYWZmZWN0ZWQgc3BlY2llcyBuYW1lcyBoYXMgYmVlbiB1cGxvYWRlZCB0byByZXZpZXcuIFRoaXMgc2hvdWxkbid0IGFmZmVjdCBhbnkgYXNzaWdubWVudHMgYnV0IG1pZ2h0IGhhdmUgY2F1c2VkIHNvbWUgaXNzdWVzIHJlYWRpbmcgaW50byBSLiAgXG5cblRoZSBHVERCIHdhcyB1cGRhdGVkIGR1ZSB0byBhIG5ldyByZWxlYXNlIHdpdGggdGF4b25vbXkgY2hhbmdlcyBoYXMgYmVlbiBtYWRlIGF2YWlsYWJsZS4gVGhlIGNvcmUgR1REQiB0ZWFtIGFkdmlzZXMgdGhhdCBldmVyeW9uZSB1c2luZyB0aGUgR1REQiB0byBjb252ZXJ0IHRvIHRoZSByZWxlYXNlIDg5LiBJIGhhdmUgYWxzbyBmb3JtYXR0ZWQgYWxsIHRoZSAxNlMgclJOQSBzZXF1ZW5jZXMgaW4gdGhlIEdUREJyODkgdGhhdCBoYXZlIHBhc3NlZCBRQy4gSWYgYW55b25lIGZpbmRzIGEgbmVlZCBmb3IgdGhlbSBJIGNhbiBzaGFyZSBvdXRzaWRlIG9mIGhlcmUgYmVjYXVzZSBJIGRvIG5vdCB3YW50IHRvIGNvbmZ1c2UgYW55b25lLiBBbHNvLCB5b3UgY2FuIGRvd25sb2FkIHRoZSBmaWxlIFwic3N1X3I4OS50c3ZcIiB1bmZvcm1hdHRlZCBmcm9tIHRoZSBHVERCIHdlYnNpdGUgc2hhcmVkIGFib3ZlLlxuXG5QeXRob24gc2NyaXB0IGNhbiBiZSBwcm92aWRlZCBvbiByZXF1ZXN0LiJdfSx7ImtpbmQiOiJPdGhlciIsInZhbHVlIjpbIntcInJlZmVyZW5jZXNcIjogW1wiUGFya3MsIEQuIEguLCBldCBhbC4gKDIwMTgpLiBcXFwiQSBzdGFuZGFyZGl6ZWQgYmFjdGVyaWFsIHRheG9ub215IGJhc2VkIG9uIGdlbm9tZSBwaHlsb2dlbnkgc3Vic3RhbnRpYWxseSByZXZpc2VzIHRoZSB0cmVlIG9mIGxpZmUuXFxcIiBOYXR1cmUgQmlvdGVjaG5vbG9neS5cIiwgXCJDb2xlLCBKLiBSLiwgUS4gV2FuZywgSi4gQS4gRmlzaCwgQi4gQ2hhaSwgRC4gTS4gTWNHYXJyZWxsLCBZLiBTdW4sIEMuIFQuIEJyb3duLCBBLiBQb3JyYXMtQWxmYXJvLCBDLiBSLiBLdXNrZSwgYW5kIEouIE0uIFRpZWRqZS4gMjAxNC4gUmlib3NvbWFsIERhdGFiYXNlIFByb2plY3Q6IGRhdGEgYW5kIHRvb2xzIGZvciBoaWdoIHRocm91Z2hwdXQgclJOQSBhbmFseXNpcyBOdWNsLiBBY2lkcyBSZXMuIDQyKERhdGFiYXNlIGlzc3VlKTpENjMzLUQ2NDI7IGRvaTogMTAuMTA5My9uYXIvZ2t0MTI0NCBbUE1JRDogMjQyODgzNjhdXCIsIFwiTkNCSSAxNlMgUmVmU2VxIE51Y2xlb3RpZGUgc2VxdWVuY2UgcmVjb3JkczogaHR0cHM6Ly93d3cubmNiaS5ubG0ubmloLmdvdi9udWNjb3JlP3Rlcm09MzMxNzUlNUJCaW9Qcm9qZWN0JTVEK09SKzMzMzE3JTVCQmlvUHJvamVjdCU1RFwiXX0iXX1dLCJoaWdobGlnaHQiOlt7Im1hdGNoZWRGaWVsZCI6Im5vdGVzLnZhbHVlIiwibWF0Y2hlZFBocmFzZXMiOlsiQWNpZHMgUmVzLiA0MihEYXRhYmFzZSBpc3N1ZSk6RDYzMy1ENjQyOyBkb2k6IDEwLjEwOTMvbmFyL2drdDEyNDQgW1x1MDAzY3NwYW4gY2xhc3M9XCJoaWdobGlnaHRcIlx1MDAzZVBNSURcdTAwM2Mvc3Bhblx1MDAzZTogMjQyODgzNjhdXCIsIFwiTkNCSSAxNlMgUmVmU2VxIl19XSwicHJvdmlkZXIiOm51bGwsInJpZ2h0cyI6W3sia2luZCI6bnVsbCwiZGVzY3JpcHRpb24iOiJDcmVhdGl2ZSBDb21tb25zIEF0dHJpYnV0aW9uIDQuMCBJbnRlcm5hdGlvbmFsIiwidXJpIjoiaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzQuMC9sZWdhbGNvZGUifSx7ImtpbmQiOm51bGwsImRlc2NyaXB0aW9uIjoiT3BlbiBBY2Nlc3MiLCJ1cmkiOiJpbmZvOmV1LXJlcG8vc2VtYW50aWNzL29wZW5BY2Nlc3MifV0sInNvdXJjZUxpbmsiOiJodHRwczovL3plbm9kby5vcmcvcmVjb3JkLzMyNjY3OTgiLCJzdW1tYXJ5IjpbIlx1MDAzY3BcdTAwM2VUaGVzZSB0d28gY29tYmluZWQgYmFjdGVyaWFsIGFuZCBhcmNoYWVhbCAxNlMgclJOQSBnZW5lIHNlcXVlbmNlIGRhdGFiYXNlcyB3ZXJlIGNvbGxhdGVkIGZyb20gdmFyaW91cyBzb3VyY2VzIGFuZCBmb3JtYXR0ZWQgZm9yIHRoZSBwdXJwb3NlIG9mIHVzaW5nIHRoZSBcdTAwMjZxdW90O2Fzc2lnblRheG9ub215XHUwMDI2cXVvdDsgY29tbWFuZCB3aXRoaW4gdGhlIERBREEyXHUwMDI2bmJzcDtwaXBlbGluZS5cdTAwM2MvcFx1MDAzZVxuXG5cdTAwM2NvbFx1MDAzZVxuXHRcdTAwM2NsaVx1MDAzZVJlZlNlcStSRFA6IFRoaXMgZGF0YWJhc2UgY29udGFpbnMgMTQ2NzYgYmFjdGVyaWFsIFx1MDAyNmFtcDsgNjYwIGFyY2hhZWEgZnVsbCAxNlMgclJOQSBnZW5lIHNlcXVlbmNlcy5cdTAwMjZuYnNwOyBJdCB3YXMgY29tcGlsZWQgaW4gMTQvMDUvMjAxOCBmcm9tIHByZWRvbWluYW50bHkgdGhlIE5DQkkgUmVmU2VxIDE2UyBycm5hIGRhdGFiYXNlIChodHRwczovL3d3dy5uY2JpLm5sbS5uaWguZ292L3JlZnNlcS90YXJnZXRlZGxvY2kvMTZTX3Byb2Nlc3MvKVx1MDAyNm5ic3A7YW5kIHdhcyBzdXBwbGVtZW50ZWQgd2l0aCBleHRyYVx1MDAyNm5ic3A7c2VxdWVuY2VzIGZyb20gdGhlXHUwMDI2bmJzcDtSRFAgZGF0YWJhc2UgKGh0dHBzOi8vcmRwLmNtZS5tc3UuZWR1L21pc2MvcmVzb3VyY2VzLmpzcCkuXHUwMDNjL2xpXHUwMDNlXG5cdFx1MDAzY2xpXHUwMDNlR2Vub21lIFRheG9ub215IERhdGFiYXNlIChHVERCKTogVGhlIG5ldyB2ZXJzaW9uIG9mIG91ciBkYWRhMiBmb3JtYXR0ZWQgR1REQiByZWZlcmVuY2Ugc2VxdWVuY2VzIG5vdyBjb250YWlucyAxNzQ2MFx1MDAyNm5ic3A7YmFjdGVyaWEgYW5kIDg3M1x1MDAyNm5ic3A7YXJjaGFlYSBmdWxsIDE2UyByUk5BIGdlbmUgc2VxdWVuY2VzLiBUaGUgcmVkdWN0aW9uIGluIHRoZSBudW1iZXIgb2Ygc3BlY2llcyAoYmFjID0yMyw0NTggc3BlY2llcyBcdTAwMjZhbXA7IGFyYz0gMTI0OCBzcGVjaWVzKSBhcyBmYXIgYXMgSVx1MDAyNm5ic3A7dW5kZXJzdGFuZFx1MDAyNm5ic3A7d2FzIGR1ZSB0byBhIG5ldyBhcHByb2FjaCB0aGV5IGhhdmUgdGFrZW4sIHdoZXJlIHNwZWNpZXMgd2VyZSBjbHVzdGVyZWQgYWNjb3JkaW5nIHRvIHRoZWlyIGdlbm9tZSBudWNsZW90aWRlIGlkZW50aXR5IGFuZCBhIHJlcHJlc2VudGF0aXZlIHNwZWNpZXMgYW5ub3RhdGlvbiB3YXMgZ2l2ZW4gdG8gYWxsIGJlbG9uZ2luZyB0byB0aGUgc2FtZSBjbHVzdGVyLiBJZiB5b3Ugd29uZGVyIHdoeSB0aGVyZSBhcmUgZmV3ZXIgc3BlY2llcyB3aXRoIDE2UyByUk5BLCB0aGF0IGlzIGJlY2F1c2Ugc29tZSBtZXRhZ2Vub21pY3MgYXNzZW1ibGVkIGdlbm9tZXMgKE1BR3MpIGxhY2tcdTAwMjZuYnNwO3RoZSAxNlMgZ2VuZSBhbmQgdGh1cyBjYW5ub3QgYmUgZXh0cmFjdGVkLiBJIGJlbGlldmUgdGhlIHJlYXNvbiB3aHkgb24gdGhlIHI4OSByZWxlYXNlIG5vdGVzIGl0IG1lbnRpb25zIGhpZ2hlciBudW1iZXJzIGJlY2F1c2UgdGhleSBhcmUgbm90IGxpbWl0ZWQgdG8gMTZTIG9ubHkgZm9yIHNwZWNpZXMgaWRlbnRpZmljYXRpb24gYW5kIGFzIGlzIG1lbnRpb25lZCB0aGV5IHVzZSBvdGhlciBzaW5nbGUtY29weSBnZW5lcyBmb3IgdGhhdCBwdXJwb3NlIGFueXdheS4gVGhlIGRhdGFiYXNlIHdhcyBkb3dubG9hZGVkIGZyb20gKFx1MDAzY2EgaHJlZj1cImh0dHBzOi8vZGF0YS5hY2UudXEuZWR1LmF1L3B1YmxpYy9ndGRiL2RhdGEvcmVsZWFzZXMvcmVsZWFzZTg5Lzg5LjAvXCJcdTAwM2VodHRwczovL2RhdGEuYWNlLnVxLmVkdS5hdS9wdWJsaWMvZ3RkYi9kYXRhL3JlbGVhc2VzL3JlbGVhc2U4OS84OS4wL1x1MDAzYy9hXHUwMDNlKVx1MDAyNm5ic3A7b24gMDMvMDcvMjAxOS4gUGxlYXNlIHJlYWQgdGhlIHJlbGVhc2Ugbm90ZXMgYW5kIGZpbGUgZGVzY3JpcHRpb25zLlx1MDAyNm5ic3A7XHUwMDNjL2xpXHUwMDNlXG5cdTAwM2Mvb2xcdTAwM2VcblxuXHUwMDNjcFx1MDAzZVRoZSBmb3JtYXR0aW5nIHRvIERBREEyIGZvcm1hdCBvZiB0aGUgZGF0YWJhc2VzIHdhcyBkb25lIHVzaW5nIGEgbG9jYWxseSB3cml0dGVuIHB5dGhvbiAyLjcgLyBiYXNoIHNjcmlwdHMuIFRoZSBzY3JpcHRcdTAwMjZuYnNwO3Rha2VzXHUwMDI2bmJzcDthcyBpbnB1dCBhIHRheG9ub215IC50c3ZcdTAwMjZuYnNwO2ZpbGUgYW5kIGEgZmFzdGFcdTAwMjZuYnNwO2ZpbGUgYXMgcHJvdmlkZWQgYnkgdGhlIGNvcmUgZGF0YWJhc2VzIGNyZWF0b3JzIGFuZCB0aGVuIHRoZXNlIHR3byBmaWxlcyBhcmUgbWF0Y2hlZCBhY2NvcmRpbmcgdG8gYSB1bmlxdWUgc2VxdWVuY2UgaWRlbnRpZmllciBhdmFpbGFibGUgaW4gYm90aCBmaWxlcy4gVGhlbiBpdFx1MDAyNm5ic3A7b3V0cHV0cyBhIGZhc3RhIGZpbGUgd2l0aCBhbGwgNyB0YXhvbm9teSByYW5rcyBzZXBhcmF0ZWQgYnkgXHUwMDI2cXVvdDs7XHUwMDI2cXVvdDsgYXMgcmVxdWlyZWQgZm9yIERBREEyIGNvbXBhdGliaWxpdHkuIEFkZGl0aW9uYWxseSxcdTAwMjZuYnNwO3dlIGhhdmUgY29uY2F0ZW5hdGVkXHUwMDI2bmJzcDt0aGUgdW5pcXVlXHUwMDI2bmJzcDtzZXF1ZW5jZSBJRCBiZSBpdCBOQ0JJL1JEUCBvciBHVERCXHUwMDI2bmJzcDtJRCB0byB0aGUgc3BlY2llcyBlbnRyeS4gV2Ugc2VlIHRoaXMgYXMgYW4gaW1wb3J0YW50IFFDIHN0ZXAgdG8gaGlnaGxpZ2h0IHRoZSBpc3N1ZXMvY29uZmlkZW5jZSBhc3NvY2lhdGVkIHdpdGggc2hvcnQgcmVhZCB0YXhvbm9teSBhc3NpZ25tZW50IGF0IHRoZSBtb3JlIGZpbmVyIHJhbmsgbGV2ZWxzLlx1MDAzYy9wXHUwMDNlIl19LHsidGltZGV4UmVjb3JkSWQiOiJ6ZW5vZG86Mzk1MTM4MyIsInRpdGxlIjoiREFEQTIgZm9ybWF0dGVkIDE2UyByUk5BIGdlbmUgc2VxdWVuY2VzIGZvciBib3RoIGJhY3RlcmlhIFx1MDAyNiBhcmNoYWVhIiwiY29udGVudFR5cGUiOlsiRGF0YXNldCJdLCJjb250cmlidXRvcnMiOlt7ImtpbmQiOiJDcmVhdG9yIiwidmFsdWUiOiJBbGkgQWxpc2h1bSJ9LHsia2luZCI6IkNvbnRhY3RQZXJzb24iLCJ2YWx1ZSI6IkFsaSBBbGlzaHVtIn0seyJraW5kIjoiT3RoZXIiLCJ2YWx1ZSI6IlNlZXJzaG9sbSBGcmVkZXJpayJ9LHsia2luZCI6IkRhdGFDdXJhdG9yIiwidmFsdWUiOiJHcmVlbmZpZWxkIFBhdWwifSx7ImtpbmQiOiJSZXNlYXJjaGVyIiwidmFsdWUiOiJDaHJpc3RvcGhlcnNlbiBDbGF1cyJ9XSwicHVibGljYXRpb25JbmZvcm1hdGlvbiI6WyJaZW5vZG8iXSwiZGF0ZXMiOlt7ImtpbmQiOiJQdWJsaWNhdGlvbiBkYXRlIiwidmFsdWUiOiIyMDIwIn0seyJraW5kIjoiSXNzdWVkIiwidmFsdWUiOiIyMDIwLTA3LTE5In1dLCJsaW5rcyI6W3sia2luZCI6IkRpZ2l0YWwgb2JqZWN0IFVSTCIsInJlc3RyaWN0aW9ucyI6bnVsbCwidGV4dCI6IkRpZ2l0YWwgb2JqZWN0IFVSTCIsInVybCI6Imh0dHBzOi8vemVub2RvLm9yZy9yZWNvcmQvMzk1MTM4MyJ9XSwibm90ZXMiOlt7ImtpbmQiOiJPdGhlciIsInZhbHVlIjpbIlRoZSBSZWZTZXErUkRQIGRhdGFiYXNlIHdhcyB1cGRhdGVkIGR1ZSB0byBhIHF1b3RhdGlvbiBtYXJrIGJ1ZyB0aGF0IHdhcyB3cm9uZ2x5IHBsYWNlZCBpbiBmcm9udCBvZiBzb21lIG9mIHRoZSBzcGVjaWVzIG5hbWVzLiBBIGZpbGUgd2l0aCBhbGwgdGhlIGFmZmVjdGVkIHNwZWNpZXMgbmFtZXMgaGFzIGJlZW4gdXBsb2FkZWQgdG8gcmV2aWV3LiBUaGlzIHNob3VsZG4ndCBhZmZlY3QgYW55IGFzc2lnbm1lbnRzIGJ1dCBtaWdodCBoYXZlIGNhdXNlZCBzb21lIGlzc3VlcyByZWFkaW5nIGludG8gUi4gIFxuXG5UaGUgR1REQiB3YXMgdXBkYXRlZCBkdWUgdG8gYSBuZXcgcmVsZWFzZSB3aXRoIHRheG9ub215IGNoYW5nZXMgaGFzIGJlZW4gbWFkZSBhdmFpbGFibGUuIFRoZSBjb3JlIEdUREIgdGVhbSBhZHZpc2VzIHRoYXQgZXZlcnlvbmUgdXNpbmcgdGhlIEdUREIgdG8gY29udmVydCB0byB0aGUgcmVsZWFzZSA5NS4gSSBoYXZlIGFsc28gZm9ybWF0dGVkIGFsbCB0aGUgMTZTIHJSTkEgc2VxdWVuY2VzIGluIHRoZSBHVERCcjk1IHRoYXQgaGF2ZSBwYXNzZWQgUUMuIElmIGFueW9uZSBmaW5kcyBhIG5lZWQgZm9yIHRoZW0gSSBjYW4gc2hhcmUgb3V0c2lkZSBvZiBoZXJlIGJlY2F1c2UgSSBkbyBub3Qgd2FudCB0byBjb25mdXNlIGFueW9uZS4gXG5cbmF3ayBzY3JpcHQgY2FuIGJlIHByb3ZpZGVkIG9uIHJlcXVlc3QuIl19LHsia2luZCI6Ik90aGVyIiwidmFsdWUiOlsie1wicmVmZXJlbmNlc1wiOiBbXCJQYXJrcywgRC4gSC4sIGV0IGFsLiAoMjAxOCkuIFxcXCJBIHN0YW5kYXJkaXplZCBiYWN0ZXJpYWwgdGF4b25vbXkgYmFzZWQgb24gZ2Vub21lIHBoeWxvZ2VueSBzdWJzdGFudGlhbGx5IHJldmlzZXMgdGhlIHRyZWUgb2YgbGlmZS5cXFwiIE5hdHVyZSBCaW90ZWNobm9sb2d5LlwiLCBcIkNvbGUsIEouIFIuLCBRLiBXYW5nLCBKLiBBLiBGaXNoLCBCLiBDaGFpLCBELiBNLiBNY0dhcnJlbGwsIFkuIFN1biwgQy4gVC4gQnJvd24sIEEuIFBvcnJhcy1BbGZhcm8sIEMuIFIuIEt1c2tlLCBhbmQgSi4gTS4gVGllZGplLiAyMDE0LiBSaWJvc29tYWwgRGF0YWJhc2UgUHJvamVjdDogZGF0YSBhbmQgdG9vbHMgZm9yIGhpZ2ggdGhyb3VnaHB1dCByUk5BIGFuYWx5c2lzIE51Y2wuIEFjaWRzIFJlcy4gNDIoRGF0YWJhc2UgaXNzdWUpOkQ2MzMtRDY0MjsgZG9pOiAxMC4xMDkzL25hci9na3QxMjQ0IFtQTUlEOiAyNDI4ODM2OF1cIiwgXCJOQ0JJIDE2UyBSZWZTZXEgTnVjbGVvdGlkZSBzZXF1ZW5jZSByZWNvcmRzOiBodHRwczovL3d3dy5uY2JpLm5sbS5uaWguZ292L251Y2NvcmU/dGVybT0zMzE3NSU1QkJpb1Byb2plY3QlNUQrT1IrMzMzMTclNUJCaW9Qcm9qZWN0JTVEXCJdfSJdfV0sImhpZ2hsaWdodCI6W3sibWF0Y2hlZEZpZWxkIjoibm90ZXMudmFsdWUiLCJtYXRjaGVkUGhyYXNlcyI6WyJBY2lkcyBSZXMuIDQyKERhdGFiYXNlIGlzc3VlKTpENjMzLUQ2NDI7IGRvaTogMTAuMTA5My9uYXIvZ2t0MTI0NCBbXHUwMDNjc3BhbiBjbGFzcz1cImhpZ2hsaWdodFwiXHUwMDNlUE1JRFx1MDAzYy9zcGFuXHUwMDNlOiAyNDI4ODM2OF1cIiwgXCJOQ0JJIDE2UyBSZWZTZXEiXX1dLCJwcm92aWRlciI6bnVsbCwicmlnaHRzIjpbeyJraW5kIjpudWxsLCJkZXNjcmlwdGlvbiI6IkNyZWF0aXZlIENvbW1vbnMgQXR0cmlidXRpb24gNC4wIEludGVybmF0aW9uYWwiLCJ1cmkiOiJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnkvNC4wL2xlZ2FsY29kZSJ9LHsia2luZCI6bnVsbCwiZGVzY3JpcHRpb24iOiJPcGVuIEFjY2VzcyIsInVyaSI6ImluZm86ZXUtcmVwby9zZW1hbnRpY3Mvb3BlbkFjY2VzcyJ9XSwic291cmNlTGluayI6Imh0dHBzOi8vemVub2RvLm9yZy9yZWNvcmQvMzk1MTM4MyIsInN1bW1hcnkiOlsiXHUwMDNjcFx1MDAzZVRoZXNlIHR3byBjb21iaW5lZCBiYWN0ZXJpYWwgYW5kIGFyY2hhZWFsIDE2UyByUk5BIGdlbmUgc2VxdWVuY2UgZGF0YWJhc2VzIHdlcmUgY29sbGF0ZWQgZnJvbSB2YXJpb3VzIHNvdXJjZXMgYW5kIGZvcm1hdHRlZCBmb3IgdGhlIHB1cnBvc2Ugb2YgdXNpbmcgdGhlIFx1MDAyNnF1b3Q7YXNzaWduVGF4b25vbXlcdTAwMjZxdW90OyBjb21tYW5kIHdpdGhpbiB0aGUgREFEQTJcdTAwMjZuYnNwO3BpcGVsaW5lLlx1MDAzYy9wXHUwMDNlXG5cblx1MDAzY29sXHUwMDNlXG5cdFx1MDAzY2xpXHUwMDNlUmVmU2VxK1JEUDogVGhpcyBkYXRhYmFzZSBjb250YWlucyAxNDY3NiBiYWN0ZXJpYWwgXHUwMDI2YW1wOyA2NjAgYXJjaGFlYSBmdWxsIDE2UyByUk5BIGdlbmUgc2VxdWVuY2VzLlx1MDAyNm5ic3A7IEl0IHdhcyBjb21waWxlZCBpbiAxNC8wNS8yMDE4IGZyb20gcHJlZG9taW5hbnRseSB0aGUgTkNCSSBSZWZTZXEgMTZTIHJybmEgZGF0YWJhc2UgKGh0dHBzOi8vd3d3Lm5jYmkubmxtLm5paC5nb3YvcmVmc2VxL3RhcmdldGVkbG9jaS8xNlNfcHJvY2Vzcy8pXHUwMDI2bmJzcDthbmQgd2FzIHN1cHBsZW1lbnRlZCB3aXRoIGV4dHJhXHUwMDI2bmJzcDtzZXF1ZW5jZXMgZnJvbSB0aGVcdTAwMjZuYnNwO1JEUCBkYXRhYmFzZSAoaHR0cHM6Ly9yZHAuY21lLm1zdS5lZHUvbWlzYy9yZXNvdXJjZXMuanNwKS5cdTAwM2MvbGlcdTAwM2Vcblx0XHUwMDNjbGlcdTAwM2VHZW5vbWUgVGF4b25vbXkgRGF0YWJhc2UgKEdUREIpOiBUaGUgbmV3IHZlcnNpb24gb2Ygb3VyIGRhZGEyIGZvcm1hdHRlZCBHVERCIHJlZmVyZW5jZSBzZXF1ZW5jZXMgbm93IGNvbnRhaW5zIDIxOTY1XHUwMDI2bmJzcDtiYWN0ZXJpYSBhbmQgMTEyNiBhcmNoYWVhIGZ1bGwgMTZTIHJSTkEgZ2VuZSBzZXF1ZW5jZXMuXHUwMDI2bmJzcDtJZiB5b3Ugd29uZGVyIHdoeSB0aGVyZSBhcmUgZmV3ZXIgc3BlY2llcyB3aXRoIDE2UyByUk5BLCB0aGF0IGlzIGJlY2F1c2Ugc29tZSBtZXRhZ2Vub21pY3MgYXNzZW1ibGVkIGdlbm9tZXMgKE1BR3MpIGxhY2tcdTAwMjZuYnNwO3RoZSAxNlMgZ2VuZSBhbmQgdGh1cyBjYW5ub3QgYmUgZXh0cmFjdGVkLlx1MDAyNm5ic3A7IFRoZSBkYXRhYmFzZSB3YXMgZG93bmxvYWRlZCBmcm9tIFx1MDAzY2EgaHJlZj1cImh0dHBzOi8vZGF0YS5hY2UudXEuZWR1LmF1L3B1YmxpYy9ndGRiL2RhdGEvcmVsZWFzZXMvcmVsZWFzZTk1L1wiXHUwMDNlaHR0cHM6Ly9kYXRhLmFjZS51cS5lZHUuYXUvcHVibGljL2d0ZGIvZGF0YS9yZWxlYXNlcy9yZWxlYXNlOTUvXHUwMDNjL2FcdTAwM2VcdTAwMjZuYnNwO29uIDE5LzA3LzIwMjAuXHUwMDI2bmJzcDtQbGVhc2UgcmVhZCB0aGUgcmVsZWFzZSBub3RlcyBhbmQgZmlsZSBkZXNjcmlwdGlvbnMuXHUwMDI2bmJzcDtcdTAwM2MvbGlcdTAwM2Vcblx1MDAzYy9vbFx1MDAzZVxuXG5cdTAwM2NwXHUwMDNlVGhlIGZvcm1hdHRpbmcgdG8gREFEQTIgZm9ybWF0IG9mIHRoZSBkYXRhYmFzZXMgd2FzIGRvbmUgdXNpbmcgYSBzaW1wbGUgYXdrIGJhc2ggc2NyaXB0cy4gVGhlIHNjcmlwdFx1MDAyNm5ic3A7dGFrZXNcdTAwMjZuYnNwO2FzIGlucHV0IGFcdTAwMjZuYnNwO2Zhc3RhXHUwMDI2bmJzcDtmaWxlIGFzIHByb3ZpZGVkIGJ5IHRoZSBjb3JlIGRhdGFiYXNlcyBjcmVhdG9ycyBhbmQgdGhlbiBpdFx1MDAyNm5ic3A7b3V0cHV0cyBhIGZhc3RhIGZpbGUgd2l0aCBhbGwgNyB0YXhvbm9teSByYW5rcyBzZXBhcmF0ZWQgYnkgXHUwMDI2cXVvdDs7XHUwMDI2cXVvdDsgYXMgcmVxdWlyZWQgZm9yIERBREEyIGNvbXBhdGliaWxpdHkuIEFkZGl0aW9uYWxseSxcdTAwMjZuYnNwO3dlIGhhdmUgY29uY2F0ZW5hdGVkXHUwMDI2bmJzcDt0aGUgdW5pcXVlXHUwMDI2bmJzcDtzZXF1ZW5jZSBJRCBiZSBpdCBOQ0JJL1JEUCBvciBHVERCXHUwMDI2bmJzcDtJRCB0byB0aGUgc3BlY2llcyBlbnRyeS4gV2Ugc2VlIHRoaXMgYXMgYW4gaW1wb3J0YW50IFFDIHN0ZXAgdG8gaGlnaGxpZ2h0IHRoZSBpc3N1ZXMvY29uZmlkZW5jZSBhc3NvY2lhdGVkIHdpdGggc2hvcnQgcmVhZCB0YXhvbm9teSBhc3NpZ25tZW50IGF0IHRoZSBtb3JlIGZpbmVyIHJhbmsgbGV2ZWxzLlx1MDAzYy9wXHUwMDNlIl19XSwiYWdncmVnYXRpb25zIjp7ImFjY2Vzc1RvRmlsZXMiOltdLCJjb250ZW50VHlwZSI6W3sia2V5IjoiZGF0YXNldCIsImRvY0NvdW50Ijo5fSx7ImtleSI6ImFydGljbGUiLCJkb2NDb3VudCI6Mn0seyJrZXkiOiJib29rIGNoYXB0ZXIiLCJkb2NDb3VudCI6MX0seyJrZXkiOiJzb2Z0d2FyZSIsImRvY0NvdW50IjoxfV0sImNvbnRyaWJ1dG9ycyI6W3sia2V5IjoiYWxpIGFsaXNodW0iLCJkb2NDb3VudCI6MTZ9LHsia2V5IjoiY2hyaXN0b3BoZXJzZW4gY2xhdXMiLCJkb2NDb3VudCI6OH0seyJrZXkiOiJncmVlbmZpZWxkIHBhdWwiLCJkb2NDb3VudCI6OH0seyJrZXkiOiJzZWVyc2hvbG0gZnJlZGVyaWsiLCJkb2NDb3VudCI6OH0seyJrZXkiOiJwb29uLCBjaGktc2FuZyIsImRvY0NvdW50IjozfSx7ImtleSI6ImFuZGVyc29uLCByLiByb3giLCJkb2NDb3VudCI6Mn0seyJrZXkiOiJnb256YWxleiwgc2FsdmFkb3IiLCJkb2NDb3VudCI6Mn0seyJrZXkiOiJnb3dyaXNoYW5rYXIsIHRoaXJ1dmFsbHVyIHIuIiwiZG9jQ291bnQiOjJ9LHsia2V5IjoiaGVybmRvbiwgdGVycnkgby4iLCJkb2NDb3VudCI6Mn0seyJrZXkiOiJzb25nLCBnYW5nIiwiZG9jQ291bnQiOjJ9XSwiZm9ybWF0IjpbeyJrZXkiOiJlbGVjdHJvbmljIHJlc291cmNlIiwiZG9jQ291bnQiOjEzfV0sImxhbmd1YWdlcyI6W3sia2V5IjoiZW5fdXMiLCJkb2NDb3VudCI6Mn0seyJrZXkiOiJlbiIsImRvY0NvdW50IjoxfV0sImxpdGVyYXJ5Rm9ybSI6W10sInBsYWNlcyI6W10sInNvdXJjZSI6W3sia2V5IjoiemVub2RvIiwiZG9jQ291bnQiOjEwfSx7ImtleSI6ImRzcGFjZUBtaXQiLCJkb2NDb3VudCI6M31dLCJzdWJqZWN0cyI6W3sia2V5IjoiMTZzIHJybmEiLCJkb2NDb3VudCI6OH0seyJrZXkiOiJhcmNoYWVhbCIsImRvY0NvdW50Ijo4fSx7ImtleSI6ImJhY3RlcmlhbCIsImRvY0NvdW50Ijo4fSx7ImtleSI6ImRhZGEyIGZvcm1hdCIsImRvY0NvdW50Ijo4fSx7ImtleSI6ImV1a2FyeW90aWMgMTZzIHJybmEgZ2VuZSIsImRvY0NvdW50IjozfSx7ImtleSI6ImFtaW5vIGFjaWRzIiwiZG9jQ291bnQiOjF9LHsia2V5IjoiYmlvYnJpY2sgcGFydHMiLCJkb2NDb3VudCI6MX0seyJrZXkiOiJkbmEgYXNzZW1ibHkiLCJkb2NDb3VudCI6MX0seyJrZXkiOiJldWthcnlvdGljIDE2cyBycm5hIGdlbmUgb24gcmVmc2VxIGRiIiwiZG9jQ291bnQiOjF9LHsia2V5IjoiZXZvbHV0aW9uIiwiZG9jQ291bnQiOjF9XX19fX0=
  recorded_at: Wed, 20 Mar 2024 15:51:27 GMT
recorded_with: VCR 6.2.0
