---
http_interactions:
- request:
    method: post
    uri: https://FAKE_TIMDEX_HOST/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query TimdexSearch__Query($q: String, $citation: String,
        $contributors: String, $fundingInformation: String, $identifiers: String,
        $locations: String, $subjects: String, $title: String, $sourceFacet: [String!],
        $from: String) {\n  search(searchterm: $q, citation: $citation, contributors:
        $contributors, fundingInformation: $fundingInformation, identifiers: $identifiers,
        locations: $locations, subjects: $subjects, title: $title, sourceFacet: $sourceFacet,
        from: $from) {\n    hits\n    records {\n      timdexRecordId\n      title\n      contentType\n      contributors
        {\n        kind\n        value\n      }\n      publicationInformation\n      dates
        {\n        kind\n        value\n      }\n      notes {\n        kind\n        value\n      }\n      highlight
        {\n        matchedField\n        matchedPhrases\n      }\n    }\n    aggregations
        {\n      contentFormat {\n        key\n        docCount\n      }\n      contentType
        {\n        key\n        docCount\n      }\n      contributors {\n        key\n        docCount\n      }\n      languages
        {\n        key\n        docCount\n      }\n      literaryForm {\n        key\n        docCount\n      }\n      source
        {\n        key\n        docCount\n      }\n      subjects {\n        key\n        docCount\n      }\n    }\n  }\n}","variables":{"from":"0","q":"10.1038/nphys1170"},"operationName":"TimdexSearch__Query"}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - MIT Libraries Client
      Content-Type:
      - application/json
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Cowboy
      Date:
      - Thu, 07 Jul 2022 19:10:13 GMT
      Connection:
      - keep-alive
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Permitted-Cross-Domain-Policies:
      - none
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Content-Type:
      - application/json; charset=utf-8
      Vary:
      - Accept, Origin
      Etag:
      - W/"71df56ec5202fe5fb2a5047f7790fa26"
      Cache-Control:
      - max-age=0, private, must-revalidate
      X-Request-Id:
      - '08dadf2b-f66f-472d-a3a3-1a058ce6fa5e'
      X-Runtime:
      - '0.249921'
      Strict-Transport-Security:
      - max-age=63072000; includeSubDomains
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 vegur
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 07 Jul 2022 19:10:14 GMT
recorded_with: VCR 6.1.0
