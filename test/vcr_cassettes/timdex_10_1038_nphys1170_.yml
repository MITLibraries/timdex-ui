---
http_interactions:
- request:
    method: post
    uri: https://FAKE_TIMDEX_HOST/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query TimdexSearch__BaseQuery($q: String, $citation: String,
        $contributors: String, $fundingInformation: String, $identifiers: String,
        $locations: String, $subjects: String, $title: String, $index: String, $from:
        String, $accessToFilesFilter: [String!], $contentTypeFilter: [String!], $contributorsFilter:
        [String!], $formatFilter: [String!], $languagesFilter: [String!], $literaryFormFilter:
        String, $placesFilter: [String!], $sourceFilter: [String!], $subjectsFilter:
        [String!]) {\n  search(searchterm: $q, citation: $citation, contributors:
        $contributors, fundingInformation: $fundingInformation, identifiers: $identifiers,
        locations: $locations, subjects: $subjects, title: $title, index: $index,
        from: $from, accessToFilesFilter: $accessToFilesFilter, contentTypeFilter:
        $contentTypeFilter, contributorsFilter: $contributorsFilter, formatFilter:
        $formatFilter, languagesFilter: $languagesFilter, literaryFormFilter: $literaryFormFilter,
        placesFilter: $placesFilter, sourceFilter: $sourceFilter, subjectsFilter:
        $subjectsFilter) {\n    hits\n    records {\n      timdexRecordId\n      title\n      contentType\n      contributors
        {\n        kind\n        value\n      }\n      publicationInformation\n      dates
        {\n        kind\n        value\n      }\n      links {\n        kind\n        restrictions\n        text\n        url\n      }\n      notes
        {\n        kind\n        value\n      }\n      highlight {\n        matchedField\n        matchedPhrases\n      }\n      provider\n      rights
        {\n        kind\n        description\n        uri\n      }\n      sourceLink\n      summary\n    }\n    aggregations
        {\n      accessToFiles {\n        key\n        docCount\n      }\n      contentType
        {\n        key\n        docCount\n      }\n      contributors {\n        key\n        docCount\n      }\n      format
        {\n        key\n        docCount\n      }\n      languages {\n        key\n        docCount\n      }\n      literaryForm
        {\n        key\n        docCount\n      }\n      places {\n        key\n        docCount\n      }\n      source
        {\n        key\n        docCount\n      }\n      subjects {\n        key\n        docCount\n      }\n    }\n  }\n}","variables":{"from":"0","q":"10.1038/nphys1170","index":"FAKE_TIMDEX_INDEX"},"operationName":"TimdexSearch__BaseQuery"}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - MIT Libraries Client
      Content-Type:
      - application/json
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Cowboy
      Date:
      - Wed, 20 Mar 2024 15:51:33 GMT
      Report-To:
      - '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1710949894&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=FSqM0BnMBERID4Kdiknb59IprJCDd%2BCYopIcnTooXGQ%3D"}]}'
      Reporting-Endpoints:
      - heroku-nel=https://nel.heroku.com/reports?ts=1710949894&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=FSqM0BnMBERID4Kdiknb59IprJCDd%2BCYopIcnTooXGQ%3D
      Nel:
      - '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}'
      Connection:
      - keep-alive
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Permitted-Cross-Domain-Policies:
      - none
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Content-Type:
      - application/json; charset=utf-8
      Vary:
      - Accept, Origin
      Etag:
      - W/"d348a7444c55f305e9c0feb7a576fc61"
      Cache-Control:
      - max-age=0, private, must-revalidate
      X-Request-Id:
      - ffe32fdb-e517-46f3-b52c-7f716e16d5cc
      X-Runtime:
      - '0.285361'
      Strict-Transport-Security:
      - max-age=63072000; includeSubDomains
      Content-Length:
      - '53923'
      Via:
      - 1.1 vegur
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 20 Mar 2024 15:51:34 GMT
recorded_with: VCR 6.2.0
