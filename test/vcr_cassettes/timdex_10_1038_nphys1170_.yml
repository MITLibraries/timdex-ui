---
http_interactions:
- request:
    method: post
    uri: https://FAKE_TIMDEX_HOST/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query TimdexSearch__Query($q: String, $citation: String,
        $contributors: String, $fundingInformation: String, $identifiers: String,
        $locations: String, $subjects: String, $title: String, $sourceFacet: String,
        $from: String) {\n  search(searchterm: $q, citation: $citation, contributors:
        $contributors, fundingInformation: $fundingInformation, identifiers: $identifiers,
        locations: $locations, subjects: $subjects, title: $title, sourceFacet: $sourceFacet,
        from: $from) {\n    hits\n    records {\n      timdexRecordId\n      title\n      contentType\n      contributors
        {\n        kind\n        value\n      }\n      publicationInformation\n      dates
        {\n        kind\n        value\n      }\n      notes {\n        kind\n        value\n      }\n    }\n    aggregations
        {\n      contentFormat {\n        key\n        docCount\n      }\n      contentType
        {\n        key\n        docCount\n      }\n      contributors {\n        key\n        docCount\n      }\n      languages
        {\n        key\n        docCount\n      }\n      literaryForm {\n        key\n        docCount\n      }\n      source
        {\n        key\n        docCount\n      }\n      subjects {\n        key\n        docCount\n      }\n    }\n  }\n}","variables":{"from":"0","q":"10.1038/nphys1170"},"operationName":"TimdexSearch__Query"}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - MIT Libraries Client
      Content-Type:
      - application/json
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Cowboy
      Date:
      - Wed, 08 Jun 2022 15:54:09 GMT
      Connection:
      - keep-alive
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Permitted-Cross-Domain-Policies:
      - none
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Content-Type:
      - application/json; charset=utf-8
      Vary:
      - Accept, Origin
      Etag:
      - W/"36f0cc2fd952d8122eda809a0e589caa"
      Cache-Control:
      - max-age=0, private, must-revalidate
      X-Request-Id:
      - 308bdf9c-00a6-48b2-b91c-2d741aa8243d
      X-Runtime:
      - '0.193978'
      Strict-Transport-Security:
      - max-age=63072000; includeSubDomains
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 vegur
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 08 Jun 2022 15:54:09 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1038/nphys1170
    body:
      encoding: UTF-8
      string: ''
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Host:
      - api.crossref.org
      User-Agent:
      - http.rb/5.0.4
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 08 Jun 2022 15:54:09 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Access-Control-Expose-Headers:
      - Link
      Access-Control-Allow-Headers:
      - X-Requested-With, Accept, Accept-Encoding, Accept-Charset, Accept-Language,
        Accept-Ranges, Cache-Control
      Access-Control-Allow-Origin:
      - "*"
      Server:
      - Jetty(9.4.40.v20210413)
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Interval:
      - 1s
      X-Api-Pool:
      - public
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: '{"status":"ok","message-type":"work","message-version":"1.0.0","message":{"indexed":{"date-parts":[[2022,4,1]],"date-time":"2022-04-01T05:13:35Z","timestamp":1648790015559},"reference-count":10,"publisher":"Springer
        Science and Business Media LLC","issue":"1","license":[{"start":{"date-parts":[[2009,1,1]],"date-time":"2009-01-01T00:00:00Z","timestamp":1230768000000},"content-version":"tdm","delay-in-days":0,"URL":"http:\/\/www.springer.com\/tdm"}],"content-domain":{"domain":[],"crossmark-restriction":false},"short-container-title":["Nature
        Phys"],"published-print":{"date-parts":[[2009,1]]},"DOI":"10.1038\/nphys1170","type":"journal-article","created":{"date-parts":[[2009,1,3]],"date-time":"2009-01-03T10:16:57Z","timestamp":1230977817000},"page":"11-12","source":"Crossref","is-referenced-by-count":9,"title":["Measured
        measurement"],"prefix":"10.1038","volume":"5","author":[{"given":"Markus","family":"Aspelmeyer","sequence":"first","affiliation":[]}],"member":"297","reference":[{"key":"BFnphys1170_CR1","doi-asserted-by":"publisher","first-page":"27","DOI":"10.1038\/nphys1133","volume":"5","author":"JS
        Lundeen","year":"2009","unstructured":"Lundeen, J. S. et al. Nature Phys.
        5, 27\u201330 (2009).","journal-title":"Nature Phys."},{"key":"BFnphys1170_CR2","volume-title":"Der
        Teil und das Ganze","author":"W Heisenberg","year":"1969","unstructured":"Heisenberg,
        W. Der Teil und das Ganze (Piper, Munich, 1969)."},{"key":"BFnphys1170_CR3","doi-asserted-by":"publisher","volume-title":"Quantum
        State Estimation","author":"MGA Paris","year":"2004","unstructured":"Paris,
        M. G. A. & Rehacek, J. (eds) Quantum State Estimation (Lecture Notes in Physics
        Vol. 649) (Springer, 2004).","DOI":"10.1007\/b98673"},{"key":"BFnphys1170_CR4","doi-asserted-by":"publisher","first-page":"052312","DOI":"10.1103\/PhysRevA.64.052312","volume":"64","author":"DFV
        James","year":"2001","unstructured":"James, D. F. V., Kwiat, P. G., Munro,
        W. J. & White, A. G. Phys. Rev. A 64, 052312 (2001).","journal-title":"Phys.
        Rev. A"},{"key":"BFnphys1170_CR5","doi-asserted-by":"publisher","first-page":"R1561","DOI":"10.1103\/PhysRevA.55.R1561","volume":"55","author":"Z
        Hradil","year":"1997","unstructured":"Hradil, Z. Phys. Rev. A 55, R1561\u2013R1564
        (1997).","journal-title":"Phys. Rev. A"},{"key":"BFnphys1170_CR6","doi-asserted-by":"publisher","first-page":"010304","DOI":"10.1103\/PhysRevA.61.010304","volume":"61","author":"K
        Banaszek","year":"1999","unstructured":"Banaszek, K., D''Ariano, G. M., Paris,
        M. G. A. & Sacchi, M. F. Phys. Rev. A 61, 010304 (1999).","journal-title":"Phys.
        Rev. A"},{"key":"BFnphys1170_CR7","doi-asserted-by":"publisher","first-page":"2455","DOI":"10.1080\/09500349708231894","volume":"44","author":"IL
        Chuang","year":"1997","unstructured":"Chuang I. L. & Nielsen, M. A. J. Mod.
        Opt. 44, 2455\u20132467 (1997).","journal-title":"J. Mod. Opt."},{"key":"BFnphys1170_CR8","doi-asserted-by":"publisher","first-page":"390","DOI":"10.1103\/PhysRevLett.78.390","volume":"78","author":"JF
        Poyatos","year":"1997","unstructured":"Poyatos J. F., Cirac, J. I. & Zoller,
        P. Phys. Rev. Lett. 78, 390\u2013393 (1997).","journal-title":"Phys. Rev.
        Lett."},{"key":"BFnphys1170_CR9","doi-asserted-by":"publisher","first-page":"563","DOI":"10.1126\/science.1162086","volume":"322","author":"M
        Lobino","year":"2008","unstructured":"Lobino, M. et al. Science 322, 563\u2013566
        (2008).","journal-title":"Science"},{"key":"BFnphys1170_CR10","doi-asserted-by":"publisher","first-page":"84","DOI":"10.1103\/PhysRevLett.10.84","volume":"10","author":"RJ
        Glauber","year":"1963","unstructured":"Glauber, R. J. Phys. Rev. Lett. 10,
        84\u201386 (1963).","journal-title":"Phys. Rev. Lett."}],"container-title":["Nature
        Physics"],"original-title":[],"language":"en","link":[{"URL":"http:\/\/www.nature.com\/articles\/nphys1170.pdf","content-type":"application\/pdf","content-version":"vor","intended-application":"text-mining"},{"URL":"http:\/\/www.nature.com\/articles\/nphys1170","content-type":"text\/html","content-version":"vor","intended-application":"text-mining"},{"URL":"http:\/\/www.nature.com\/articles\/nphys1170.pdf","content-type":"application\/pdf","content-version":"vor","intended-application":"similarity-checking"}],"deposited":{"date-parts":[[2021,12,2]],"date-time":"2021-12-02T07:10:15Z","timestamp":1638429015000},"score":1,"resource":{"primary":{"URL":"http:\/\/www.nature.com\/articles\/nphys1170"}},"subtitle":[],"short-title":[],"issued":{"date-parts":[[2009,1]]},"references-count":10,"journal-issue":{"issue":"1","published-print":{"date-parts":[[2009,1]]}},"alternative-id":["BFnphys1170"],"URL":"http:\/\/dx.doi.org\/10.1038\/nphys1170","relation":{},"ISSN":["1745-2473","1745-2481"],"issn-type":[{"value":"1745-2473","type":"print"},{"value":"1745-2481","type":"electronic"}],"subject":["General
        Physics and Astronomy"],"published":{"date-parts":[[2009,1]]}}}'
  recorded_at: Wed, 08 Jun 2022 15:54:09 GMT
recorded_with: VCR 6.1.0
